// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace clientmsg {

namespace {

const ::google::protobuf::Descriptor* RequestUserFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUserFriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserFriendListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserFriendListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendUserFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendUserFriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseAddOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseAddOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestDelFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestDelFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyOnlineState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyOnlineState_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyRemarks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyRemarks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyGroup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_friend_2eproto() {
  protobuf_AddDesc_friend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friend.proto");
  GOOGLE_CHECK(file != NULL);
  RequestUserFriendList_descriptor_ = file->message_type(0);
  static const int RequestUserFriendList_offsets_[1] = {
  };
  RequestUserFriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUserFriendList_descriptor_,
      RequestUserFriendList::default_instance_,
      RequestUserFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserFriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUserFriendList));
  UserFriendListInfo_descriptor_ = file->message_type(1);
  static const int UserFriendListInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendListInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendListInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendListInfo, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendListInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendListInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendListInfo, group_),
  };
  UserFriendListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserFriendListInfo_descriptor_,
      UserFriendListInfo::default_instance_,
      UserFriendListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserFriendListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserFriendListInfo));
  SendUserFriendList_descriptor_ = file->message_type(2);
  static const int SendUserFriendList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendUserFriendList, friendlist_),
  };
  SendUserFriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendUserFriendList_descriptor_,
      SendUserFriendList::default_instance_,
      SendUserFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendUserFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendUserFriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendUserFriendList));
  RequestAddFriend_descriptor_ = file->message_type(3);
  static const int RequestAddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddFriend, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddFriend, group_),
  };
  RequestAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAddFriend_descriptor_,
      RequestAddFriend::default_instance_,
      RequestAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAddFriend));
  AddFriendNotify_descriptor_ = file->message_type(4);
  static const int AddFriendNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNotify, name_),
  };
  AddFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendNotify_descriptor_,
      AddFriendNotify::default_instance_,
      AddFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendNotify));
  ResponseAddOther_descriptor_ = file->message_type(5);
  static const int ResponseAddOther_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAddOther, accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAddOther, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAddOther, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAddOther, chartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAddOther, group_),
  };
  ResponseAddOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseAddOther_descriptor_,
      ResponseAddOther::default_instance_,
      ResponseAddOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAddOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAddOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseAddOther));
  RequestDelFriend_descriptor_ = file->message_type(6);
  static const int RequestDelFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelFriend, names_),
  };
  RequestDelFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestDelFriend_descriptor_,
      RequestDelFriend::default_instance_,
      RequestDelFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestDelFriend));
  NotifyOnlineState_descriptor_ = file->message_type(7);
  static const int NotifyOnlineState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOnlineState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOnlineState, online_),
  };
  NotifyOnlineState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyOnlineState_descriptor_,
      NotifyOnlineState::default_instance_,
      NotifyOnlineState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOnlineState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyOnlineState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyOnlineState));
  AddFriendResult_descriptor_ = file->message_type(8);
  static const int AddFriendResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendResult, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendResult, friendinfo_),
  };
  AddFriendResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendResult_descriptor_,
      AddFriendResult::default_instance_,
      AddFriendResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendResult));
  ModifyRemarks_descriptor_ = file->message_type(9);
  static const int ModifyRemarks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRemarks, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRemarks, remark_),
  };
  ModifyRemarks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyRemarks_descriptor_,
      ModifyRemarks::default_instance_,
      ModifyRemarks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRemarks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyRemarks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyRemarks));
  ModifyGroup_descriptor_ = file->message_type(10);
  static const int ModifyGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyGroup, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyGroup, group_),
  };
  ModifyGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyGroup_descriptor_,
      ModifyGroup::default_instance_,
      ModifyGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyGroup));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUserFriendList_descriptor_, &RequestUserFriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserFriendListInfo_descriptor_, &UserFriendListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendUserFriendList_descriptor_, &SendUserFriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAddFriend_descriptor_, &RequestAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendNotify_descriptor_, &AddFriendNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseAddOther_descriptor_, &ResponseAddOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestDelFriend_descriptor_, &RequestDelFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyOnlineState_descriptor_, &NotifyOnlineState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendResult_descriptor_, &AddFriendResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyRemarks_descriptor_, &ModifyRemarks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyGroup_descriptor_, &ModifyGroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friend_2eproto() {
  delete RequestUserFriendList::default_instance_;
  delete RequestUserFriendList_reflection_;
  delete UserFriendListInfo::default_instance_;
  delete UserFriendListInfo_reflection_;
  delete SendUserFriendList::default_instance_;
  delete SendUserFriendList_reflection_;
  delete RequestAddFriend::default_instance_;
  delete RequestAddFriend_reflection_;
  delete AddFriendNotify::default_instance_;
  delete AddFriendNotify_reflection_;
  delete ResponseAddOther::default_instance_;
  delete ResponseAddOther_reflection_;
  delete RequestDelFriend::default_instance_;
  delete RequestDelFriend_reflection_;
  delete NotifyOnlineState::default_instance_;
  delete NotifyOnlineState_reflection_;
  delete AddFriendResult::default_instance_;
  delete AddFriendResult_reflection_;
  delete ModifyRemarks::default_instance_;
  delete ModifyRemarks_reflection_;
  delete ModifyGroup::default_instance_;
  delete ModifyGroup_reflection_;
}

void protobuf_AddDesc_friend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014friend.proto\022\tclientmsg\032\014common.proto\""
    "\027\n\025RequestUserFriendList\"\216\001\n\022UserFriendL"
    "istInfo\022\016\n\006charid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\016\n"
    "\006remark\030\003 \001(\t\022\016\n\006online\030\004 \001(\010\022\033\n\004type\030\005 "
    "\001(\0162\r.enumCharType\022\035\n\005group\030\006 \001(\0162\016.enum"
    "GroupType\"G\n\022SendUserFriendList\0221\n\nfrien"
    "dlist\030\001 \003(\0132\035.clientmsg.UserFriendListIn"
    "fo\"\?\n\020RequestAddFriend\022\014\n\004name\030\001 \001(\t\022\035\n\005"
    "group\030\002 \001(\0162\016.enumGroupType\"\037\n\017AddFriend"
    "Notify\022\014\n\004name\030\001 \001(\t\"\200\001\n\020ResponseAddOthe"
    "r\022\016\n\006accept\030\001 \001(\010\022\014\n\004name\030\002 \001(\t\022\016\n\006chari"
    "d\030\003 \001(\r\022\037\n\010chartype\030\004 \001(\0162\r.enumCharType"
    "\022\035\n\005group\030\005 \001(\0162\016.enumGroupType\"!\n\020Reque"
    "stDelFriend\022\r\n\005names\030\001 \003(\t\"1\n\021NotifyOnli"
    "neState\022\014\n\004name\030\001 \001(\t\022\016\n\006online\030\002 \001(\010\"U\n"
    "\017AddFriendResult\022\017\n\007success\030\001 \001(\010\0221\n\nfri"
    "endinfo\030\002 \001(\0132\035.clientmsg.UserFriendList"
    "Info\"-\n\rModifyRemarks\022\014\n\004name\030\001 \001(\t\022\016\n\006r"
    "emark\030\002 \001(\t\"J\n\013ModifyGroup\022\014\n\004name\030\001 \001(\t"
    "\022\016\n\006charid\030\002 \001(\r\022\035\n\005group\030\003 \001(\0162\016.enumGr"
    "oupType", 807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friend.proto", &protobuf_RegisterTypes);
  RequestUserFriendList::default_instance_ = new RequestUserFriendList();
  UserFriendListInfo::default_instance_ = new UserFriendListInfo();
  SendUserFriendList::default_instance_ = new SendUserFriendList();
  RequestAddFriend::default_instance_ = new RequestAddFriend();
  AddFriendNotify::default_instance_ = new AddFriendNotify();
  ResponseAddOther::default_instance_ = new ResponseAddOther();
  RequestDelFriend::default_instance_ = new RequestDelFriend();
  NotifyOnlineState::default_instance_ = new NotifyOnlineState();
  AddFriendResult::default_instance_ = new AddFriendResult();
  ModifyRemarks::default_instance_ = new ModifyRemarks();
  ModifyGroup::default_instance_ = new ModifyGroup();
  RequestUserFriendList::default_instance_->InitAsDefaultInstance();
  UserFriendListInfo::default_instance_->InitAsDefaultInstance();
  SendUserFriendList::default_instance_->InitAsDefaultInstance();
  RequestAddFriend::default_instance_->InitAsDefaultInstance();
  AddFriendNotify::default_instance_->InitAsDefaultInstance();
  ResponseAddOther::default_instance_->InitAsDefaultInstance();
  RequestDelFriend::default_instance_->InitAsDefaultInstance();
  NotifyOnlineState::default_instance_->InitAsDefaultInstance();
  AddFriendResult::default_instance_->InitAsDefaultInstance();
  ModifyRemarks::default_instance_->InitAsDefaultInstance();
  ModifyGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friend_2eproto {
  StaticDescriptorInitializer_friend_2eproto() {
    protobuf_AddDesc_friend_2eproto();
  }
} static_descriptor_initializer_friend_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestUserFriendList::RequestUserFriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestUserFriendList::InitAsDefaultInstance() {
}

RequestUserFriendList::RequestUserFriendList(const RequestUserFriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUserFriendList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUserFriendList::~RequestUserFriendList() {
  SharedDtor();
}

void RequestUserFriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestUserFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUserFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUserFriendList_descriptor_;
}

const RequestUserFriendList& RequestUserFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

RequestUserFriendList* RequestUserFriendList::default_instance_ = NULL;

RequestUserFriendList* RequestUserFriendList::New() const {
  return new RequestUserFriendList;
}

void RequestUserFriendList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUserFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestUserFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestUserFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestUserFriendList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUserFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUserFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUserFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUserFriendList::MergeFrom(const RequestUserFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUserFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUserFriendList::CopyFrom(const RequestUserFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUserFriendList::IsInitialized() const {

  return true;
}

void RequestUserFriendList::Swap(RequestUserFriendList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUserFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUserFriendList_descriptor_;
  metadata.reflection = RequestUserFriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserFriendListInfo::kCharidFieldNumber;
const int UserFriendListInfo::kNameFieldNumber;
const int UserFriendListInfo::kRemarkFieldNumber;
const int UserFriendListInfo::kOnlineFieldNumber;
const int UserFriendListInfo::kTypeFieldNumber;
const int UserFriendListInfo::kGroupFieldNumber;
#endif  // !_MSC_VER

UserFriendListInfo::UserFriendListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserFriendListInfo::InitAsDefaultInstance() {
}

UserFriendListInfo::UserFriendListInfo(const UserFriendListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserFriendListInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_ = false;
  type_ = 1;
  group_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserFriendListInfo::~UserFriendListInfo() {
  SharedDtor();
}

void UserFriendListInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void UserFriendListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserFriendListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserFriendListInfo_descriptor_;
}

const UserFriendListInfo& UserFriendListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

UserFriendListInfo* UserFriendListInfo::default_instance_ = NULL;

UserFriendListInfo* UserFriendListInfo::New() const {
  return new UserFriendListInfo;
}

void UserFriendListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
    online_ = false;
    type_ = 1;
    group_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserFriendListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remark;
        break;
      }

      // optional string remark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_online;
        break;
      }

      // optional bool online = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .enumCharType type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumCharType_IsValid(value)) {
            set_type(static_cast< ::enumCharType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_group;
        break;
      }

      // optional .enumGroupType group = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumGroupType_IsValid(value)) {
            set_group(static_cast< ::enumGroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserFriendListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->remark(), output);
  }

  // optional bool online = 4;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->online(), output);
  }

  // optional .enumCharType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .enumGroupType group = 6;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserFriendListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remark(), target);
  }

  // optional bool online = 4;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->online(), target);
  }

  // optional .enumCharType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .enumGroupType group = 6;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserFriendListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string remark = 3;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional bool online = 4;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional .enumCharType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .enumGroupType group = 6;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserFriendListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserFriendListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserFriendListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserFriendListInfo::MergeFrom(const UserFriendListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserFriendListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserFriendListInfo::CopyFrom(const UserFriendListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserFriendListInfo::IsInitialized() const {

  return true;
}

void UserFriendListInfo::Swap(UserFriendListInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(remark_, other->remark_);
    std::swap(online_, other->online_);
    std::swap(type_, other->type_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserFriendListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserFriendListInfo_descriptor_;
  metadata.reflection = UserFriendListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendUserFriendList::kFriendlistFieldNumber;
#endif  // !_MSC_VER

SendUserFriendList::SendUserFriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendUserFriendList::InitAsDefaultInstance() {
}

SendUserFriendList::SendUserFriendList(const SendUserFriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendUserFriendList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendUserFriendList::~SendUserFriendList() {
  SharedDtor();
}

void SendUserFriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendUserFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendUserFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendUserFriendList_descriptor_;
}

const SendUserFriendList& SendUserFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

SendUserFriendList* SendUserFriendList::default_instance_ = NULL;

SendUserFriendList* SendUserFriendList::New() const {
  return new SendUserFriendList;
}

void SendUserFriendList::Clear() {
  friendlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendUserFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .clientmsg.UserFriendListInfo friendlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friendlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendUserFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .clientmsg.UserFriendListInfo friendlist = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendUserFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .clientmsg.UserFriendListInfo friendlist = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendUserFriendList::ByteSize() const {
  int total_size = 0;

  // repeated .clientmsg.UserFriendListInfo friendlist = 1;
  total_size += 1 * this->friendlist_size();
  for (int i = 0; i < this->friendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendUserFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendUserFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendUserFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendUserFriendList::MergeFrom(const SendUserFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlist_.MergeFrom(from.friendlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendUserFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendUserFriendList::CopyFrom(const SendUserFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendUserFriendList::IsInitialized() const {

  return true;
}

void SendUserFriendList::Swap(SendUserFriendList* other) {
  if (other != this) {
    friendlist_.Swap(&other->friendlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendUserFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendUserFriendList_descriptor_;
  metadata.reflection = SendUserFriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAddFriend::kNameFieldNumber;
const int RequestAddFriend::kGroupFieldNumber;
#endif  // !_MSC_VER

RequestAddFriend::RequestAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestAddFriend::InitAsDefaultInstance() {
}

RequestAddFriend::RequestAddFriend(const RequestAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestAddFriend::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAddFriend::~RequestAddFriend() {
  SharedDtor();
}

void RequestAddFriend::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RequestAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAddFriend_descriptor_;
}

const RequestAddFriend& RequestAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

RequestAddFriend* RequestAddFriend::default_instance_ = NULL;

RequestAddFriend* RequestAddFriend::New() const {
  return new RequestAddFriend;
}

void RequestAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    group_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // optional .enumGroupType group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumGroupType_IsValid(value)) {
            set_group(static_cast< ::enumGroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .enumGroupType group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .enumGroupType group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .enumGroupType group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAddFriend::MergeFrom(const RequestAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAddFriend::CopyFrom(const RequestAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAddFriend::IsInitialized() const {

  return true;
}

void RequestAddFriend::Swap(RequestAddFriend* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAddFriend_descriptor_;
  metadata.reflection = RequestAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendNotify::kNameFieldNumber;
#endif  // !_MSC_VER

AddFriendNotify::AddFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFriendNotify::InitAsDefaultInstance() {
}

AddFriendNotify::AddFriendNotify(const AddFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendNotify::~AddFriendNotify() {
  SharedDtor();
}

void AddFriendNotify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AddFriendNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendNotify_descriptor_;
}

const AddFriendNotify& AddFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

AddFriendNotify* AddFriendNotify::default_instance_ = NULL;

AddFriendNotify* AddFriendNotify::New() const {
  return new AddFriendNotify;
}

void AddFriendNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFriendNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendNotify::MergeFrom(const AddFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendNotify::CopyFrom(const AddFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendNotify::IsInitialized() const {

  return true;
}

void AddFriendNotify::Swap(AddFriendNotify* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendNotify_descriptor_;
  metadata.reflection = AddFriendNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseAddOther::kAcceptFieldNumber;
const int ResponseAddOther::kNameFieldNumber;
const int ResponseAddOther::kCharidFieldNumber;
const int ResponseAddOther::kChartypeFieldNumber;
const int ResponseAddOther::kGroupFieldNumber;
#endif  // !_MSC_VER

ResponseAddOther::ResponseAddOther()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseAddOther::InitAsDefaultInstance() {
}

ResponseAddOther::ResponseAddOther(const ResponseAddOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseAddOther::SharedCtor() {
  _cached_size_ = 0;
  accept_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  chartype_ = 1;
  group_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseAddOther::~ResponseAddOther() {
  SharedDtor();
}

void ResponseAddOther::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ResponseAddOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseAddOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseAddOther_descriptor_;
}

const ResponseAddOther& ResponseAddOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

ResponseAddOther* ResponseAddOther::default_instance_ = NULL;

ResponseAddOther* ResponseAddOther::New() const {
  return new ResponseAddOther;
}

void ResponseAddOther::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accept_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    charid_ = 0u;
    chartype_ = 1;
    group_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseAddOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool accept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chartype;
        break;
      }

      // optional .enumCharType chartype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chartype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumCharType_IsValid(value)) {
            set_chartype(static_cast< ::enumCharType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }

      // optional .enumGroupType group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumGroupType_IsValid(value)) {
            set_group(static_cast< ::enumGroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseAddOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool accept = 1;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accept(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional .enumCharType chartype = 4;
  if (has_chartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->chartype(), output);
  }

  // optional .enumGroupType group = 5;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseAddOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool accept = 1;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accept(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional .enumCharType chartype = 4;
  if (has_chartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->chartype(), target);
  }

  // optional .enumGroupType group = 5;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseAddOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool accept = 1;
    if (has_accept()) {
      total_size += 1 + 1;
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .enumCharType chartype = 4;
    if (has_chartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chartype());
    }

    // optional .enumGroupType group = 5;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseAddOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseAddOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseAddOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseAddOther::MergeFrom(const ResponseAddOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accept()) {
      set_accept(from.accept());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_chartype()) {
      set_chartype(from.chartype());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseAddOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseAddOther::CopyFrom(const ResponseAddOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAddOther::IsInitialized() const {

  return true;
}

void ResponseAddOther::Swap(ResponseAddOther* other) {
  if (other != this) {
    std::swap(accept_, other->accept_);
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(chartype_, other->chartype_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseAddOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseAddOther_descriptor_;
  metadata.reflection = ResponseAddOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestDelFriend::kNamesFieldNumber;
#endif  // !_MSC_VER

RequestDelFriend::RequestDelFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestDelFriend::InitAsDefaultInstance() {
}

RequestDelFriend::RequestDelFriend(const RequestDelFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestDelFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDelFriend::~RequestDelFriend() {
  SharedDtor();
}

void RequestDelFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestDelFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDelFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDelFriend_descriptor_;
}

const RequestDelFriend& RequestDelFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

RequestDelFriend* RequestDelFriend::default_instance_ = NULL;

RequestDelFriend* RequestDelFriend::New() const {
  return new RequestDelFriend;
}

void RequestDelFriend::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestDelFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestDelFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestDelFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestDelFriend::ByteSize() const {
  int total_size = 0;

  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDelFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestDelFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestDelFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestDelFriend::MergeFrom(const RequestDelFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestDelFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDelFriend::CopyFrom(const RequestDelFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDelFriend::IsInitialized() const {

  return true;
}

void RequestDelFriend::Swap(RequestDelFriend* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestDelFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestDelFriend_descriptor_;
  metadata.reflection = RequestDelFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyOnlineState::kNameFieldNumber;
const int NotifyOnlineState::kOnlineFieldNumber;
#endif  // !_MSC_VER

NotifyOnlineState::NotifyOnlineState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyOnlineState::InitAsDefaultInstance() {
}

NotifyOnlineState::NotifyOnlineState(const NotifyOnlineState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyOnlineState::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyOnlineState::~NotifyOnlineState() {
  SharedDtor();
}

void NotifyOnlineState::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NotifyOnlineState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyOnlineState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyOnlineState_descriptor_;
}

const NotifyOnlineState& NotifyOnlineState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

NotifyOnlineState* NotifyOnlineState::default_instance_ = NULL;

NotifyOnlineState* NotifyOnlineState::New() const {
  return new NotifyOnlineState;
}

void NotifyOnlineState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyOnlineState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }

      // optional bool online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyOnlineState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bool online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyOnlineState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyOnlineState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool online = 2;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyOnlineState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyOnlineState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyOnlineState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyOnlineState::MergeFrom(const NotifyOnlineState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyOnlineState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyOnlineState::CopyFrom(const NotifyOnlineState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyOnlineState::IsInitialized() const {

  return true;
}

void NotifyOnlineState::Swap(NotifyOnlineState* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyOnlineState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyOnlineState_descriptor_;
  metadata.reflection = NotifyOnlineState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendResult::kSuccessFieldNumber;
const int AddFriendResult::kFriendinfoFieldNumber;
#endif  // !_MSC_VER

AddFriendResult::AddFriendResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFriendResult::InitAsDefaultInstance() {
  friendinfo_ = const_cast< ::clientmsg::UserFriendListInfo*>(&::clientmsg::UserFriendListInfo::default_instance());
}

AddFriendResult::AddFriendResult(const AddFriendResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFriendResult::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  friendinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendResult::~AddFriendResult() {
  SharedDtor();
}

void AddFriendResult::SharedDtor() {
  if (this != default_instance_) {
    delete friendinfo_;
  }
}

void AddFriendResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendResult_descriptor_;
}

const AddFriendResult& AddFriendResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

AddFriendResult* AddFriendResult::default_instance_ = NULL;

AddFriendResult* AddFriendResult::New() const {
  return new AddFriendResult;
}

void AddFriendResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_friendinfo()) {
      if (friendinfo_ != NULL) friendinfo_->::clientmsg::UserFriendListInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendinfo;
        break;
      }

      // optional .clientmsg.UserFriendListInfo friendinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFriendResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional .clientmsg.UserFriendListInfo friendinfo = 2;
  if (has_friendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friendinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFriendResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional .clientmsg.UserFriendListInfo friendinfo = 2;
  if (has_friendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friendinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFriendResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional .clientmsg.UserFriendListInfo friendinfo = 2;
    if (has_friendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendResult::MergeFrom(const AddFriendResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_friendinfo()) {
      mutable_friendinfo()->::clientmsg::UserFriendListInfo::MergeFrom(from.friendinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendResult::CopyFrom(const AddFriendResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendResult::IsInitialized() const {

  return true;
}

void AddFriendResult::Swap(AddFriendResult* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(friendinfo_, other->friendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendResult_descriptor_;
  metadata.reflection = AddFriendResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyRemarks::kNameFieldNumber;
const int ModifyRemarks::kRemarkFieldNumber;
#endif  // !_MSC_VER

ModifyRemarks::ModifyRemarks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyRemarks::InitAsDefaultInstance() {
}

ModifyRemarks::ModifyRemarks(const ModifyRemarks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyRemarks::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyRemarks::~ModifyRemarks() {
  SharedDtor();
}

void ModifyRemarks::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void ModifyRemarks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyRemarks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyRemarks_descriptor_;
}

const ModifyRemarks& ModifyRemarks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

ModifyRemarks* ModifyRemarks::default_instance_ = NULL;

ModifyRemarks* ModifyRemarks::New() const {
  return new ModifyRemarks;
}

void ModifyRemarks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyRemarks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_remark;
        break;
      }

      // optional string remark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyRemarks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string remark = 2;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyRemarks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string remark = 2;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyRemarks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string remark = 2;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyRemarks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyRemarks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyRemarks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyRemarks::MergeFrom(const ModifyRemarks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyRemarks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyRemarks::CopyFrom(const ModifyRemarks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyRemarks::IsInitialized() const {

  return true;
}

void ModifyRemarks::Swap(ModifyRemarks* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyRemarks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyRemarks_descriptor_;
  metadata.reflection = ModifyRemarks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyGroup::kNameFieldNumber;
const int ModifyGroup::kCharidFieldNumber;
const int ModifyGroup::kGroupFieldNumber;
#endif  // !_MSC_VER

ModifyGroup::ModifyGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyGroup::InitAsDefaultInstance() {
}

ModifyGroup::ModifyGroup(const ModifyGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyGroup::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  group_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyGroup::~ModifyGroup() {
  SharedDtor();
}

void ModifyGroup::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModifyGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyGroup_descriptor_;
}

const ModifyGroup& ModifyGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();
  return *default_instance_;
}

ModifyGroup* ModifyGroup::default_instance_ = NULL;

ModifyGroup* ModifyGroup::New() const {
  return new ModifyGroup;
}

void ModifyGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    charid_ = 0u;
    group_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group;
        break;
      }

      // optional .enumGroupType group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enumGroupType_IsValid(value)) {
            set_group(static_cast< ::enumGroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional .enumGroupType group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional .enumGroupType group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .enumGroupType group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyGroup::MergeFrom(const ModifyGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyGroup::CopyFrom(const ModifyGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyGroup::IsInitialized() const {

  return true;
}

void ModifyGroup::Swap(ModifyGroup* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyGroup_descriptor_;
  metadata.reflection = ModifyGroup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace clientmsg

// @@protoc_insertion_point(global_scope)
