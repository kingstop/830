// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace clientmsg {

namespace {

const ::google::protobuf::Descriptor* UserOneMailContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOneMailContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserOpenMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOpenMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMailContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMailContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSendMailByid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSendMailByid_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSendMailByName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSendMailByName_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enumMailType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mail_2eproto() {
  protobuf_AddDesc_mail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mail.proto");
  GOOGLE_CHECK(file != NULL);
  UserOneMailContent_descriptor_ = file->message_type(0);
  static const int UserOneMailContent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOneMailContent, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOneMailContent, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOneMailContent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOneMailContent, isdelete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOneMailContent, isread_),
  };
  UserOneMailContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOneMailContent_descriptor_,
      UserOneMailContent::default_instance_,
      UserOneMailContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOneMailContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOneMailContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOneMailContent));
  UserOpenMail_descriptor_ = file->message_type(1);
  static const int UserOpenMail_offsets_[1] = {
  };
  UserOpenMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOpenMail_descriptor_,
      UserOpenMail::default_instance_,
      UserOpenMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOpenMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOpenMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOpenMail));
  SendMailContent_descriptor_ = file->message_type(2);
  static const int SendMailContent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailContent, mail_contents_),
  };
  SendMailContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMailContent_descriptor_,
      SendMailContent::default_instance_,
      SendMailContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMailContent));
  DelMail_descriptor_ = file->message_type(3);
  static const int DelMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMail, mail_ids_),
  };
  DelMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelMail_descriptor_,
      DelMail::default_instance_,
      DelMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelMail));
  ReadMail_descriptor_ = file->message_type(4);
  static const int ReadMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMail, mail_ids_),
  };
  ReadMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadMail_descriptor_,
      ReadMail::default_instance_,
      ReadMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadMail));
  UserSendMailByid_descriptor_ = file->message_type(5);
  static const int UserSendMailByid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSendMailByid, remoteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSendMailByid, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSendMailByid, type_),
  };
  UserSendMailByid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSendMailByid_descriptor_,
      UserSendMailByid::default_instance_,
      UserSendMailByid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSendMailByid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSendMailByid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSendMailByid));
  UserSendMailByName_descriptor_ = file->message_type(6);
  static const int UserSendMailByName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSendMailByName, remotename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSendMailByName, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSendMailByName, type_),
  };
  UserSendMailByName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSendMailByName_descriptor_,
      UserSendMailByName::default_instance_,
      UserSendMailByName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSendMailByName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSendMailByName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSendMailByName));
  enumMailType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOneMailContent_descriptor_, &UserOneMailContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOpenMail_descriptor_, &UserOpenMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMailContent_descriptor_, &SendMailContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelMail_descriptor_, &DelMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadMail_descriptor_, &ReadMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSendMailByid_descriptor_, &UserSendMailByid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSendMailByName_descriptor_, &UserSendMailByName::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mail_2eproto() {
  delete UserOneMailContent::default_instance_;
  delete UserOneMailContent_reflection_;
  delete UserOpenMail::default_instance_;
  delete UserOpenMail_reflection_;
  delete SendMailContent::default_instance_;
  delete SendMailContent_reflection_;
  delete DelMail::default_instance_;
  delete DelMail_reflection_;
  delete ReadMail::default_instance_;
  delete ReadMail_reflection_;
  delete UserSendMailByid::default_instance_;
  delete UserSendMailByid_reflection_;
  delete UserSendMailByName::default_instance_;
  delete UserSendMailByName_reflection_;
}

void protobuf_AddDesc_mail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmail.proto\022\tclientmsg\032\014common.proto\"~\n"
    "\022UserOneMailContent\022\016\n\006mailid\030\001 \001(\r\022\017\n\007c"
    "ontent\030\002 \001(\t\022%\n\004type\030\003 \001(\0162\027.clientmsg.e"
    "numMailType\022\020\n\010isdelete\030\004 \001(\r\022\016\n\006isread\030"
    "\005 \001(\r\"\016\n\014UserOpenMail\"G\n\017SendMailContent"
    "\0224\n\rmail_contents\030\001 \003(\0132\035.clientmsg.User"
    "OneMailContent\"\033\n\007DelMail\022\020\n\010mail_ids\030\002 "
    "\003(\r\"\034\n\010ReadMail\022\020\n\010mail_ids\030\001 \003(\r\"\\\n\020Use"
    "rSendMailByid\022\020\n\010remoteid\030\001 \001(\004\022\017\n\007conte"
    "nt\030\002 \001(\t\022%\n\004type\030\003 \001(\0162\027.clientmsg.enumM"
    "ailType\"`\n\022UserSendMailByName\022\022\n\nremoten"
    "ame\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\022%\n\004type\030\003 \001(\016"
    "2\027.clientmsg.enumMailType*G\n\014enumMailTyp"
    "e\022\024\n\020enumMailType_Sys\020\001\022!\n\035enumMailType_"
    "RequestAddFriend\020\002", 578);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mail.proto", &protobuf_RegisterTypes);
  UserOneMailContent::default_instance_ = new UserOneMailContent();
  UserOpenMail::default_instance_ = new UserOpenMail();
  SendMailContent::default_instance_ = new SendMailContent();
  DelMail::default_instance_ = new DelMail();
  ReadMail::default_instance_ = new ReadMail();
  UserSendMailByid::default_instance_ = new UserSendMailByid();
  UserSendMailByName::default_instance_ = new UserSendMailByName();
  UserOneMailContent::default_instance_->InitAsDefaultInstance();
  UserOpenMail::default_instance_->InitAsDefaultInstance();
  SendMailContent::default_instance_->InitAsDefaultInstance();
  DelMail::default_instance_->InitAsDefaultInstance();
  ReadMail::default_instance_->InitAsDefaultInstance();
  UserSendMailByid::default_instance_->InitAsDefaultInstance();
  UserSendMailByName::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mail_2eproto {
  StaticDescriptorInitializer_mail_2eproto() {
    protobuf_AddDesc_mail_2eproto();
  }
} static_descriptor_initializer_mail_2eproto_;
const ::google::protobuf::EnumDescriptor* enumMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumMailType_descriptor_;
}
bool enumMailType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserOneMailContent::kMailidFieldNumber;
const int UserOneMailContent::kContentFieldNumber;
const int UserOneMailContent::kTypeFieldNumber;
const int UserOneMailContent::kIsdeleteFieldNumber;
const int UserOneMailContent::kIsreadFieldNumber;
#endif  // !_MSC_VER

UserOneMailContent::UserOneMailContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserOneMailContent::InitAsDefaultInstance() {
}

UserOneMailContent::UserOneMailContent(const UserOneMailContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserOneMailContent::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  isdelete_ = 0u;
  isread_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOneMailContent::~UserOneMailContent() {
  SharedDtor();
}

void UserOneMailContent::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void UserOneMailContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOneMailContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOneMailContent_descriptor_;
}

const UserOneMailContent& UserOneMailContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

UserOneMailContent* UserOneMailContent::default_instance_ = NULL;

UserOneMailContent* UserOneMailContent::New() const {
  return new UserOneMailContent;
}

void UserOneMailContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    type_ = 1;
    isdelete_ = 0u;
    isread_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOneMailContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .clientmsg.enumMailType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clientmsg::enumMailType_IsValid(value)) {
            set_type(static_cast< ::clientmsg::enumMailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isdelete;
        break;
      }

      // optional uint32 isdelete = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdelete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isdelete_)));
          set_has_isdelete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isread;
        break;
      }

      // optional uint32 isread = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isread_)));
          set_has_isread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserOneMailContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // optional .clientmsg.enumMailType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 isdelete = 4;
  if (has_isdelete()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isdelete(), output);
  }

  // optional uint32 isread = 5;
  if (has_isread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isread(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserOneMailContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional .clientmsg.enumMailType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 isdelete = 4;
  if (has_isdelete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isdelete(), target);
  }

  // optional uint32 isread = 5;
  if (has_isread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isread(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserOneMailContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .clientmsg.enumMailType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 isdelete = 4;
    if (has_isdelete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isdelete());
    }

    // optional uint32 isread = 5;
    if (has_isread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isread());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOneMailContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOneMailContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOneMailContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOneMailContent::MergeFrom(const UserOneMailContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isdelete()) {
      set_isdelete(from.isdelete());
    }
    if (from.has_isread()) {
      set_isread(from.isread());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOneMailContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOneMailContent::CopyFrom(const UserOneMailContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOneMailContent::IsInitialized() const {

  return true;
}

void UserOneMailContent::Swap(UserOneMailContent* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(content_, other->content_);
    std::swap(type_, other->type_);
    std::swap(isdelete_, other->isdelete_);
    std::swap(isread_, other->isread_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOneMailContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOneMailContent_descriptor_;
  metadata.reflection = UserOneMailContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UserOpenMail::UserOpenMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserOpenMail::InitAsDefaultInstance() {
}

UserOpenMail::UserOpenMail(const UserOpenMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserOpenMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOpenMail::~UserOpenMail() {
  SharedDtor();
}

void UserOpenMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserOpenMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOpenMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOpenMail_descriptor_;
}

const UserOpenMail& UserOpenMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

UserOpenMail* UserOpenMail::default_instance_ = NULL;

UserOpenMail* UserOpenMail::New() const {
  return new UserOpenMail;
}

void UserOpenMail::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOpenMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UserOpenMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserOpenMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserOpenMail::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOpenMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOpenMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOpenMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOpenMail::MergeFrom(const UserOpenMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOpenMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOpenMail::CopyFrom(const UserOpenMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOpenMail::IsInitialized() const {

  return true;
}

void UserOpenMail::Swap(UserOpenMail* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOpenMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOpenMail_descriptor_;
  metadata.reflection = UserOpenMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMailContent::kMailContentsFieldNumber;
#endif  // !_MSC_VER

SendMailContent::SendMailContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMailContent::InitAsDefaultInstance() {
}

SendMailContent::SendMailContent(const SendMailContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMailContent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMailContent::~SendMailContent() {
  SharedDtor();
}

void SendMailContent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendMailContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMailContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMailContent_descriptor_;
}

const SendMailContent& SendMailContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

SendMailContent* SendMailContent::default_instance_ = NULL;

SendMailContent* SendMailContent::New() const {
  return new SendMailContent;
}

void SendMailContent::Clear() {
  mail_contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMailContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .clientmsg.UserOneMailContent mail_contents = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mail_contents;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMailContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .clientmsg.UserOneMailContent mail_contents = 1;
  for (int i = 0; i < this->mail_contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail_contents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMailContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .clientmsg.UserOneMailContent mail_contents = 1;
  for (int i = 0; i < this->mail_contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail_contents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMailContent::ByteSize() const {
  int total_size = 0;

  // repeated .clientmsg.UserOneMailContent mail_contents = 1;
  total_size += 1 * this->mail_contents_size();
  for (int i = 0; i < this->mail_contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_contents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMailContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMailContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMailContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMailContent::MergeFrom(const SendMailContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_contents_.MergeFrom(from.mail_contents_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMailContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMailContent::CopyFrom(const SendMailContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMailContent::IsInitialized() const {

  return true;
}

void SendMailContent::Swap(SendMailContent* other) {
  if (other != this) {
    mail_contents_.Swap(&other->mail_contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMailContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMailContent_descriptor_;
  metadata.reflection = SendMailContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelMail::kMailIdsFieldNumber;
#endif  // !_MSC_VER

DelMail::DelMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelMail::InitAsDefaultInstance() {
}

DelMail::DelMail(const DelMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelMail::~DelMail() {
  SharedDtor();
}

void DelMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelMail_descriptor_;
}

const DelMail& DelMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

DelMail* DelMail::default_instance_ = NULL;

DelMail* DelMail::New() const {
  return new DelMail;
}

void DelMail::Clear() {
  mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mail_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 mail_ids = 2;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->mail_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 mail_ids = 2;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->mail_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelMail::ByteSize() const {
  int total_size = 0;

  // repeated uint32 mail_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mail_ids(i));
    }
    total_size += 1 * this->mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelMail::MergeFrom(const DelMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_ids_.MergeFrom(from.mail_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelMail::CopyFrom(const DelMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelMail::IsInitialized() const {

  return true;
}

void DelMail::Swap(DelMail* other) {
  if (other != this) {
    mail_ids_.Swap(&other->mail_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelMail_descriptor_;
  metadata.reflection = DelMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadMail::kMailIdsFieldNumber;
#endif  // !_MSC_VER

ReadMail::ReadMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadMail::InitAsDefaultInstance() {
}

ReadMail::ReadMail(const ReadMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadMail::~ReadMail() {
  SharedDtor();
}

void ReadMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadMail_descriptor_;
}

const ReadMail& ReadMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

ReadMail* ReadMail::default_instance_ = NULL;

ReadMail* ReadMail::New() const {
  return new ReadMail;
}

void ReadMail::Clear() {
  mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mail_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mail_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 mail_ids = 1;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->mail_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 mail_ids = 1;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->mail_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadMail::ByteSize() const {
  int total_size = 0;

  // repeated uint32 mail_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mail_ids(i));
    }
    total_size += 1 * this->mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadMail::MergeFrom(const ReadMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_ids_.MergeFrom(from.mail_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadMail::CopyFrom(const ReadMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadMail::IsInitialized() const {

  return true;
}

void ReadMail::Swap(ReadMail* other) {
  if (other != this) {
    mail_ids_.Swap(&other->mail_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadMail_descriptor_;
  metadata.reflection = ReadMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSendMailByid::kRemoteidFieldNumber;
const int UserSendMailByid::kContentFieldNumber;
const int UserSendMailByid::kTypeFieldNumber;
#endif  // !_MSC_VER

UserSendMailByid::UserSendMailByid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSendMailByid::InitAsDefaultInstance() {
}

UserSendMailByid::UserSendMailByid(const UserSendMailByid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSendMailByid::SharedCtor() {
  _cached_size_ = 0;
  remoteid_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSendMailByid::~UserSendMailByid() {
  SharedDtor();
}

void UserSendMailByid::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void UserSendMailByid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSendMailByid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSendMailByid_descriptor_;
}

const UserSendMailByid& UserSendMailByid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

UserSendMailByid* UserSendMailByid::default_instance_ = NULL;

UserSendMailByid* UserSendMailByid::New() const {
  return new UserSendMailByid;
}

void UserSendMailByid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remoteid_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSendMailByid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 remoteid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remoteid_)));
          set_has_remoteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .clientmsg.enumMailType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clientmsg::enumMailType_IsValid(value)) {
            set_type(static_cast< ::clientmsg::enumMailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSendMailByid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 remoteid = 1;
  if (has_remoteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->remoteid(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // optional .clientmsg.enumMailType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSendMailByid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 remoteid = 1;
  if (has_remoteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->remoteid(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional .clientmsg.enumMailType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSendMailByid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 remoteid = 1;
    if (has_remoteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->remoteid());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .clientmsg.enumMailType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSendMailByid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSendMailByid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSendMailByid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSendMailByid::MergeFrom(const UserSendMailByid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remoteid()) {
      set_remoteid(from.remoteid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSendMailByid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSendMailByid::CopyFrom(const UserSendMailByid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSendMailByid::IsInitialized() const {

  return true;
}

void UserSendMailByid::Swap(UserSendMailByid* other) {
  if (other != this) {
    std::swap(remoteid_, other->remoteid_);
    std::swap(content_, other->content_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSendMailByid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSendMailByid_descriptor_;
  metadata.reflection = UserSendMailByid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSendMailByName::kRemotenameFieldNumber;
const int UserSendMailByName::kContentFieldNumber;
const int UserSendMailByName::kTypeFieldNumber;
#endif  // !_MSC_VER

UserSendMailByName::UserSendMailByName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSendMailByName::InitAsDefaultInstance() {
}

UserSendMailByName::UserSendMailByName(const UserSendMailByName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSendMailByName::SharedCtor() {
  _cached_size_ = 0;
  remotename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSendMailByName::~UserSendMailByName() {
  SharedDtor();
}

void UserSendMailByName::SharedDtor() {
  if (remotename_ != &::google::protobuf::internal::kEmptyString) {
    delete remotename_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void UserSendMailByName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSendMailByName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSendMailByName_descriptor_;
}

const UserSendMailByName& UserSendMailByName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mail_2eproto();
  return *default_instance_;
}

UserSendMailByName* UserSendMailByName::default_instance_ = NULL;

UserSendMailByName* UserSendMailByName::New() const {
  return new UserSendMailByName;
}

void UserSendMailByName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_remotename()) {
      if (remotename_ != &::google::protobuf::internal::kEmptyString) {
        remotename_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSendMailByName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string remotename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remotename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remotename().data(), this->remotename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .clientmsg.enumMailType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clientmsg::enumMailType_IsValid(value)) {
            set_type(static_cast< ::clientmsg::enumMailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSendMailByName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string remotename = 1;
  if (has_remotename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remotename().data(), this->remotename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->remotename(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // optional .clientmsg.enumMailType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSendMailByName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string remotename = 1;
  if (has_remotename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remotename().data(), this->remotename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->remotename(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional .clientmsg.enumMailType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSendMailByName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string remotename = 1;
    if (has_remotename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remotename());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .clientmsg.enumMailType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSendMailByName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSendMailByName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSendMailByName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSendMailByName::MergeFrom(const UserSendMailByName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remotename()) {
      set_remotename(from.remotename());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSendMailByName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSendMailByName::CopyFrom(const UserSendMailByName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSendMailByName::IsInitialized() const {

  return true;
}

void UserSendMailByName::Swap(UserSendMailByName* other) {
  if (other != this) {
    std::swap(remotename_, other->remotename_);
    std::swap(content_, other->content_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSendMailByName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSendMailByName_descriptor_;
  metadata.reflection = UserSendMailByName_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace clientmsg

// @@protoc_insertion_point(global_scope)
