// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef PROTOBUF_friend_2eproto__INCLUDED
#define PROTOBUF_friend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace clientmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friend_2eproto();
void protobuf_AssignDesc_friend_2eproto();
void protobuf_ShutdownFile_friend_2eproto();

class RequestUserFriendList;
class UserFriendListInfo;
class SendUserFriendList;
class RequestAddFriend;
class AddFriendNotify;
class ResponseAddOther;
class RequestDelFriend;
class NotifyOnlineState;
class AddFriendResult;
class ModifyRemarks;
class ModifyGroup;

// ===================================================================

class RequestUserFriendList : public ::google::protobuf::Message {
 public:
  RequestUserFriendList();
  virtual ~RequestUserFriendList();

  RequestUserFriendList(const RequestUserFriendList& from);

  inline RequestUserFriendList& operator=(const RequestUserFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestUserFriendList& default_instance();

  void Swap(RequestUserFriendList* other);

  // implements Message ----------------------------------------------

  RequestUserFriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestUserFriendList& from);
  void MergeFrom(const RequestUserFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:clientmsg.RequestUserFriendList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static RequestUserFriendList* default_instance_;
};
// -------------------------------------------------------------------

class UserFriendListInfo : public ::google::protobuf::Message {
 public:
  UserFriendListInfo();
  virtual ~UserFriendListInfo();

  UserFriendListInfo(const UserFriendListInfo& from);

  inline UserFriendListInfo& operator=(const UserFriendListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserFriendListInfo& default_instance();

  void Swap(UserFriendListInfo* other);

  // implements Message ----------------------------------------------

  UserFriendListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserFriendListInfo& from);
  void MergeFrom(const UserFriendListInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string remark = 3;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 3;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // optional bool online = 4;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 4;
  inline bool online() const;
  inline void set_online(bool value);

  // optional .enumCharType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::enumCharType type() const;
  inline void set_type(::enumCharType value);

  // optional .enumGroupType group = 6;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 6;
  inline ::enumGroupType group() const;
  inline void set_group(::enumGroupType value);

  // @@protoc_insertion_point(class_scope:clientmsg.UserFriendListInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  bool online_;
  ::std::string* remark_;
  int type_;
  int group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static UserFriendListInfo* default_instance_;
};
// -------------------------------------------------------------------

class SendUserFriendList : public ::google::protobuf::Message {
 public:
  SendUserFriendList();
  virtual ~SendUserFriendList();

  SendUserFriendList(const SendUserFriendList& from);

  inline SendUserFriendList& operator=(const SendUserFriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendUserFriendList& default_instance();

  void Swap(SendUserFriendList* other);

  // implements Message ----------------------------------------------

  SendUserFriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendUserFriendList& from);
  void MergeFrom(const SendUserFriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .clientmsg.UserFriendListInfo friendlist = 1;
  inline int friendlist_size() const;
  inline void clear_friendlist();
  static const int kFriendlistFieldNumber = 1;
  inline const ::clientmsg::UserFriendListInfo& friendlist(int index) const;
  inline ::clientmsg::UserFriendListInfo* mutable_friendlist(int index);
  inline ::clientmsg::UserFriendListInfo* add_friendlist();
  inline const ::google::protobuf::RepeatedPtrField< ::clientmsg::UserFriendListInfo >&
      friendlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::clientmsg::UserFriendListInfo >*
      mutable_friendlist();

  // @@protoc_insertion_point(class_scope:clientmsg.SendUserFriendList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::clientmsg::UserFriendListInfo > friendlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static SendUserFriendList* default_instance_;
};
// -------------------------------------------------------------------

class RequestAddFriend : public ::google::protobuf::Message {
 public:
  RequestAddFriend();
  virtual ~RequestAddFriend();

  RequestAddFriend(const RequestAddFriend& from);

  inline RequestAddFriend& operator=(const RequestAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestAddFriend& default_instance();

  void Swap(RequestAddFriend* other);

  // implements Message ----------------------------------------------

  RequestAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestAddFriend& from);
  void MergeFrom(const RequestAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .enumGroupType group = 2;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::enumGroupType group() const;
  inline void set_group(::enumGroupType value);

  // @@protoc_insertion_point(class_scope:clientmsg.RequestAddFriend)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static RequestAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class AddFriendNotify : public ::google::protobuf::Message {
 public:
  AddFriendNotify();
  virtual ~AddFriendNotify();

  AddFriendNotify(const AddFriendNotify& from);

  inline AddFriendNotify& operator=(const AddFriendNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendNotify& default_instance();

  void Swap(AddFriendNotify* other);

  // implements Message ----------------------------------------------

  AddFriendNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendNotify& from);
  void MergeFrom(const AddFriendNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:clientmsg.AddFriendNotify)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static AddFriendNotify* default_instance_;
};
// -------------------------------------------------------------------

class ResponseAddOther : public ::google::protobuf::Message {
 public:
  ResponseAddOther();
  virtual ~ResponseAddOther();

  ResponseAddOther(const ResponseAddOther& from);

  inline ResponseAddOther& operator=(const ResponseAddOther& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseAddOther& default_instance();

  void Swap(ResponseAddOther* other);

  // implements Message ----------------------------------------------

  ResponseAddOther* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseAddOther& from);
  void MergeFrom(const ResponseAddOther& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool accept = 1;
  inline bool has_accept() const;
  inline void clear_accept();
  static const int kAcceptFieldNumber = 1;
  inline bool accept() const;
  inline void set_accept(bool value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional .enumCharType chartype = 4;
  inline bool has_chartype() const;
  inline void clear_chartype();
  static const int kChartypeFieldNumber = 4;
  inline ::enumCharType chartype() const;
  inline void set_chartype(::enumCharType value);

  // optional .enumGroupType group = 5;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::enumGroupType group() const;
  inline void set_group(::enumGroupType value);

  // @@protoc_insertion_point(class_scope:clientmsg.ResponseAddOther)
 private:
  inline void set_has_accept();
  inline void clear_has_accept();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_chartype();
  inline void clear_has_chartype();
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  bool accept_;
  ::google::protobuf::uint32 charid_;
  int chartype_;
  int group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static ResponseAddOther* default_instance_;
};
// -------------------------------------------------------------------

class RequestDelFriend : public ::google::protobuf::Message {
 public:
  RequestDelFriend();
  virtual ~RequestDelFriend();

  RequestDelFriend(const RequestDelFriend& from);

  inline RequestDelFriend& operator=(const RequestDelFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestDelFriend& default_instance();

  void Swap(RequestDelFriend* other);

  // implements Message ----------------------------------------------

  RequestDelFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestDelFriend& from);
  void MergeFrom(const RequestDelFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 1;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 1;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:clientmsg.RequestDelFriend)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> names_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static RequestDelFriend* default_instance_;
};
// -------------------------------------------------------------------

class NotifyOnlineState : public ::google::protobuf::Message {
 public:
  NotifyOnlineState();
  virtual ~NotifyOnlineState();

  NotifyOnlineState(const NotifyOnlineState& from);

  inline NotifyOnlineState& operator=(const NotifyOnlineState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyOnlineState& default_instance();

  void Swap(NotifyOnlineState* other);

  // implements Message ----------------------------------------------

  NotifyOnlineState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyOnlineState& from);
  void MergeFrom(const NotifyOnlineState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool online = 2;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 2;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:clientmsg.NotifyOnlineState)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  bool online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static NotifyOnlineState* default_instance_;
};
// -------------------------------------------------------------------

class AddFriendResult : public ::google::protobuf::Message {
 public:
  AddFriendResult();
  virtual ~AddFriendResult();

  AddFriendResult(const AddFriendResult& from);

  inline AddFriendResult& operator=(const AddFriendResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendResult& default_instance();

  void Swap(AddFriendResult* other);

  // implements Message ----------------------------------------------

  AddFriendResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendResult& from);
  void MergeFrom(const AddFriendResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // optional .clientmsg.UserFriendListInfo friendinfo = 2;
  inline bool has_friendinfo() const;
  inline void clear_friendinfo();
  static const int kFriendinfoFieldNumber = 2;
  inline const ::clientmsg::UserFriendListInfo& friendinfo() const;
  inline ::clientmsg::UserFriendListInfo* mutable_friendinfo();
  inline ::clientmsg::UserFriendListInfo* release_friendinfo();
  inline void set_allocated_friendinfo(::clientmsg::UserFriendListInfo* friendinfo);

  // @@protoc_insertion_point(class_scope:clientmsg.AddFriendResult)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_friendinfo();
  inline void clear_has_friendinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::clientmsg::UserFriendListInfo* friendinfo_;
  bool success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static AddFriendResult* default_instance_;
};
// -------------------------------------------------------------------

class ModifyRemarks : public ::google::protobuf::Message {
 public:
  ModifyRemarks();
  virtual ~ModifyRemarks();

  ModifyRemarks(const ModifyRemarks& from);

  inline ModifyRemarks& operator=(const ModifyRemarks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyRemarks& default_instance();

  void Swap(ModifyRemarks* other);

  // implements Message ----------------------------------------------

  ModifyRemarks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifyRemarks& from);
  void MergeFrom(const ModifyRemarks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string remark = 2;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 2;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // @@protoc_insertion_point(class_scope:clientmsg.ModifyRemarks)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_remark();
  inline void clear_has_remark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* remark_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static ModifyRemarks* default_instance_;
};
// -------------------------------------------------------------------

class ModifyGroup : public ::google::protobuf::Message {
 public:
  ModifyGroup();
  virtual ~ModifyGroup();

  ModifyGroup(const ModifyGroup& from);

  inline ModifyGroup& operator=(const ModifyGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyGroup& default_instance();

  void Swap(ModifyGroup* other);

  // implements Message ----------------------------------------------

  ModifyGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifyGroup& from);
  void MergeFrom(const ModifyGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional .enumGroupType group = 3;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 3;
  inline ::enumGroupType group() const;
  inline void set_group(::enumGroupType value);

  // @@protoc_insertion_point(class_scope:clientmsg.ModifyGroup)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  int group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();

  void InitAsDefaultInstance();
  static ModifyGroup* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestUserFriendList

// -------------------------------------------------------------------

// UserFriendListInfo

// optional uint32 charid = 1;
inline bool UserFriendListInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserFriendListInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserFriendListInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserFriendListInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 UserFriendListInfo::charid() const {
  return charid_;
}
inline void UserFriendListInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool UserFriendListInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserFriendListInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserFriendListInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserFriendListInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UserFriendListInfo::name() const {
  return *name_;
}
inline void UserFriendListInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserFriendListInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserFriendListInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserFriendListInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UserFriendListInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserFriendListInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string remark = 3;
inline bool UserFriendListInfo::has_remark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserFriendListInfo::set_has_remark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserFriendListInfo::clear_has_remark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserFriendListInfo::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& UserFriendListInfo::remark() const {
  return *remark_;
}
inline void UserFriendListInfo::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void UserFriendListInfo::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void UserFriendListInfo::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserFriendListInfo::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* UserFriendListInfo::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserFriendListInfo::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool online = 4;
inline bool UserFriendListInfo::has_online() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserFriendListInfo::set_has_online() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserFriendListInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserFriendListInfo::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool UserFriendListInfo::online() const {
  return online_;
}
inline void UserFriendListInfo::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// optional .enumCharType type = 5;
inline bool UserFriendListInfo::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserFriendListInfo::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserFriendListInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserFriendListInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::enumCharType UserFriendListInfo::type() const {
  return static_cast< ::enumCharType >(type_);
}
inline void UserFriendListInfo::set_type(::enumCharType value) {
  assert(::enumCharType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .enumGroupType group = 6;
inline bool UserFriendListInfo::has_group() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserFriendListInfo::set_has_group() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserFriendListInfo::clear_has_group() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserFriendListInfo::clear_group() {
  group_ = 1;
  clear_has_group();
}
inline ::enumGroupType UserFriendListInfo::group() const {
  return static_cast< ::enumGroupType >(group_);
}
inline void UserFriendListInfo::set_group(::enumGroupType value) {
  assert(::enumGroupType_IsValid(value));
  set_has_group();
  group_ = value;
}

// -------------------------------------------------------------------

// SendUserFriendList

// repeated .clientmsg.UserFriendListInfo friendlist = 1;
inline int SendUserFriendList::friendlist_size() const {
  return friendlist_.size();
}
inline void SendUserFriendList::clear_friendlist() {
  friendlist_.Clear();
}
inline const ::clientmsg::UserFriendListInfo& SendUserFriendList::friendlist(int index) const {
  return friendlist_.Get(index);
}
inline ::clientmsg::UserFriendListInfo* SendUserFriendList::mutable_friendlist(int index) {
  return friendlist_.Mutable(index);
}
inline ::clientmsg::UserFriendListInfo* SendUserFriendList::add_friendlist() {
  return friendlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::clientmsg::UserFriendListInfo >&
SendUserFriendList::friendlist() const {
  return friendlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::clientmsg::UserFriendListInfo >*
SendUserFriendList::mutable_friendlist() {
  return &friendlist_;
}

// -------------------------------------------------------------------

// RequestAddFriend

// optional string name = 1;
inline bool RequestAddFriend::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestAddFriend::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestAddFriend::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestAddFriend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RequestAddFriend::name() const {
  return *name_;
}
inline void RequestAddFriend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestAddFriend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RequestAddFriend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestAddFriend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RequestAddFriend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestAddFriend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .enumGroupType group = 2;
inline bool RequestAddFriend::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestAddFriend::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestAddFriend::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestAddFriend::clear_group() {
  group_ = 1;
  clear_has_group();
}
inline ::enumGroupType RequestAddFriend::group() const {
  return static_cast< ::enumGroupType >(group_);
}
inline void RequestAddFriend::set_group(::enumGroupType value) {
  assert(::enumGroupType_IsValid(value));
  set_has_group();
  group_ = value;
}

// -------------------------------------------------------------------

// AddFriendNotify

// optional string name = 1;
inline bool AddFriendNotify::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendNotify::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendNotify::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendNotify::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AddFriendNotify::name() const {
  return *name_;
}
inline void AddFriendNotify::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AddFriendNotify::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AddFriendNotify::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddFriendNotify::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AddFriendNotify::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddFriendNotify::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ResponseAddOther

// optional bool accept = 1;
inline bool ResponseAddOther::has_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseAddOther::set_has_accept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseAddOther::clear_has_accept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseAddOther::clear_accept() {
  accept_ = false;
  clear_has_accept();
}
inline bool ResponseAddOther::accept() const {
  return accept_;
}
inline void ResponseAddOther::set_accept(bool value) {
  set_has_accept();
  accept_ = value;
}

// optional string name = 2;
inline bool ResponseAddOther::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseAddOther::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseAddOther::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseAddOther::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ResponseAddOther::name() const {
  return *name_;
}
inline void ResponseAddOther::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ResponseAddOther::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ResponseAddOther::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseAddOther::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ResponseAddOther::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseAddOther::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charid = 3;
inline bool ResponseAddOther::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseAddOther::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseAddOther::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseAddOther::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 ResponseAddOther::charid() const {
  return charid_;
}
inline void ResponseAddOther::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional .enumCharType chartype = 4;
inline bool ResponseAddOther::has_chartype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseAddOther::set_has_chartype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseAddOther::clear_has_chartype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseAddOther::clear_chartype() {
  chartype_ = 1;
  clear_has_chartype();
}
inline ::enumCharType ResponseAddOther::chartype() const {
  return static_cast< ::enumCharType >(chartype_);
}
inline void ResponseAddOther::set_chartype(::enumCharType value) {
  assert(::enumCharType_IsValid(value));
  set_has_chartype();
  chartype_ = value;
}

// optional .enumGroupType group = 5;
inline bool ResponseAddOther::has_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResponseAddOther::set_has_group() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResponseAddOther::clear_has_group() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResponseAddOther::clear_group() {
  group_ = 1;
  clear_has_group();
}
inline ::enumGroupType ResponseAddOther::group() const {
  return static_cast< ::enumGroupType >(group_);
}
inline void ResponseAddOther::set_group(::enumGroupType value) {
  assert(::enumGroupType_IsValid(value));
  set_has_group();
  group_ = value;
}

// -------------------------------------------------------------------

// RequestDelFriend

// repeated string names = 1;
inline int RequestDelFriend::names_size() const {
  return names_.size();
}
inline void RequestDelFriend::clear_names() {
  names_.Clear();
}
inline const ::std::string& RequestDelFriend::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* RequestDelFriend::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void RequestDelFriend::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void RequestDelFriend::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void RequestDelFriend::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestDelFriend::add_names() {
  return names_.Add();
}
inline void RequestDelFriend::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void RequestDelFriend::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void RequestDelFriend::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RequestDelFriend::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RequestDelFriend::mutable_names() {
  return &names_;
}

// -------------------------------------------------------------------

// NotifyOnlineState

// optional string name = 1;
inline bool NotifyOnlineState::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyOnlineState::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyOnlineState::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyOnlineState::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NotifyOnlineState::name() const {
  return *name_;
}
inline void NotifyOnlineState::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NotifyOnlineState::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NotifyOnlineState::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotifyOnlineState::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NotifyOnlineState::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NotifyOnlineState::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool online = 2;
inline bool NotifyOnlineState::has_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyOnlineState::set_has_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyOnlineState::clear_has_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyOnlineState::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool NotifyOnlineState::online() const {
  return online_;
}
inline void NotifyOnlineState::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// AddFriendResult

// optional bool success = 1;
inline bool AddFriendResult::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendResult::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool AddFriendResult::success() const {
  return success_;
}
inline void AddFriendResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional .clientmsg.UserFriendListInfo friendinfo = 2;
inline bool AddFriendResult::has_friendinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFriendResult::set_has_friendinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddFriendResult::clear_has_friendinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddFriendResult::clear_friendinfo() {
  if (friendinfo_ != NULL) friendinfo_->::clientmsg::UserFriendListInfo::Clear();
  clear_has_friendinfo();
}
inline const ::clientmsg::UserFriendListInfo& AddFriendResult::friendinfo() const {
  return friendinfo_ != NULL ? *friendinfo_ : *default_instance_->friendinfo_;
}
inline ::clientmsg::UserFriendListInfo* AddFriendResult::mutable_friendinfo() {
  set_has_friendinfo();
  if (friendinfo_ == NULL) friendinfo_ = new ::clientmsg::UserFriendListInfo;
  return friendinfo_;
}
inline ::clientmsg::UserFriendListInfo* AddFriendResult::release_friendinfo() {
  clear_has_friendinfo();
  ::clientmsg::UserFriendListInfo* temp = friendinfo_;
  friendinfo_ = NULL;
  return temp;
}
inline void AddFriendResult::set_allocated_friendinfo(::clientmsg::UserFriendListInfo* friendinfo) {
  delete friendinfo_;
  friendinfo_ = friendinfo;
  if (friendinfo) {
    set_has_friendinfo();
  } else {
    clear_has_friendinfo();
  }
}

// -------------------------------------------------------------------

// ModifyRemarks

// optional string name = 1;
inline bool ModifyRemarks::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifyRemarks::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifyRemarks::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifyRemarks::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ModifyRemarks::name() const {
  return *name_;
}
inline void ModifyRemarks::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModifyRemarks::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModifyRemarks::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModifyRemarks::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ModifyRemarks::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModifyRemarks::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string remark = 2;
inline bool ModifyRemarks::has_remark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModifyRemarks::set_has_remark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModifyRemarks::clear_has_remark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModifyRemarks::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& ModifyRemarks::remark() const {
  return *remark_;
}
inline void ModifyRemarks::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void ModifyRemarks::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void ModifyRemarks::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModifyRemarks::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* ModifyRemarks::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModifyRemarks::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ModifyGroup

// optional string name = 1;
inline bool ModifyGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifyGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifyGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifyGroup::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ModifyGroup::name() const {
  return *name_;
}
inline void ModifyGroup::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModifyGroup::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModifyGroup::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModifyGroup::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ModifyGroup::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModifyGroup::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charid = 2;
inline bool ModifyGroup::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModifyGroup::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModifyGroup::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModifyGroup::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 ModifyGroup::charid() const {
  return charid_;
}
inline void ModifyGroup::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional .enumGroupType group = 3;
inline bool ModifyGroup::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModifyGroup::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModifyGroup::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModifyGroup::clear_group() {
  group_ = 1;
  clear_has_group();
}
inline ::enumGroupType ModifyGroup::group() const {
  return static_cast< ::enumGroupType >(group_);
}
inline void ModifyGroup::set_group(::enumGroupType value) {
  assert(::enumGroupType_IsValid(value));
  set_has_group();
  group_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace clientmsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friend_2eproto__INCLUDED
