// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_gate_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_gate_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msgs2s {

namespace {

const ::google::protobuf::Descriptor* GTLGData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTLGData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLN2GTUserLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLN2GTUserLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLN2GTKickUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLN2GTKickUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGT2LNOnlines_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGT2LNOnlines_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGT2LNPrepar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGT2LNPrepar_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGTRegisterLG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGTRegisterLG_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fgate_5flogin_2eproto() {
  protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_gate_login.proto");
  GOOGLE_CHECK(file != NULL);
  GTLGData_descriptor_ = file->message_type(0);
  static const int GTLGData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTLGData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTLGData, transid_),
  };
  GTLGData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTLGData_descriptor_,
      GTLGData::default_instance_,
      GTLGData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTLGData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTLGData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTLGData));
  MsgLN2GTUserLogin_descriptor_ = file->message_type(1);
  static const int MsgLN2GTUserLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTUserLogin, data_),
  };
  MsgLN2GTUserLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLN2GTUserLogin_descriptor_,
      MsgLN2GTUserLogin::default_instance_,
      MsgLN2GTUserLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTUserLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTUserLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLN2GTUserLogin));
  MsgLN2GTKickUser_descriptor_ = file->message_type(2);
  static const int MsgLN2GTKickUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTKickUser, data_),
  };
  MsgLN2GTKickUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLN2GTKickUser_descriptor_,
      MsgLN2GTKickUser::default_instance_,
      MsgLN2GTKickUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTKickUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLN2GTKickUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLN2GTKickUser));
  MsgGT2LNOnlines_descriptor_ = file->message_type(3);
  static const int MsgGT2LNOnlines_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNOnlines, onlines_),
  };
  MsgGT2LNOnlines_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGT2LNOnlines_descriptor_,
      MsgGT2LNOnlines::default_instance_,
      MsgGT2LNOnlines_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNOnlines, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNOnlines, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGT2LNOnlines));
  MsgGT2LNPrepar_descriptor_ = file->message_type(4);
  static const int MsgGT2LNPrepar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNPrepar, account_),
  };
  MsgGT2LNPrepar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGT2LNPrepar_descriptor_,
      MsgGT2LNPrepar::default_instance_,
      MsgGT2LNPrepar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNPrepar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGT2LNPrepar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGT2LNPrepar));
  MsgGTRegisterLG_descriptor_ = file->message_type(5);
  static const int MsgGTRegisterLG_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, gateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, accounts_),
  };
  MsgGTRegisterLG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGTRegisterLG_descriptor_,
      MsgGTRegisterLG::default_instance_,
      MsgGTRegisterLG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGTRegisterLG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGTRegisterLG));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fgate_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTLGData_descriptor_, &GTLGData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLN2GTUserLogin_descriptor_, &MsgLN2GTUserLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLN2GTKickUser_descriptor_, &MsgLN2GTKickUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGT2LNOnlines_descriptor_, &MsgGT2LNOnlines::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGT2LNPrepar_descriptor_, &MsgGT2LNPrepar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGTRegisterLG_descriptor_, &MsgGTRegisterLG::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fgate_5flogin_2eproto() {
  delete GTLGData::default_instance_;
  delete GTLGData_reflection_;
  delete MsgLN2GTUserLogin::default_instance_;
  delete MsgLN2GTUserLogin_reflection_;
  delete MsgLN2GTKickUser::default_instance_;
  delete MsgLN2GTKickUser_reflection_;
  delete MsgGT2LNOnlines::default_instance_;
  delete MsgGT2LNOnlines_reflection_;
  delete MsgGT2LNPrepar::default_instance_;
  delete MsgGT2LNPrepar_reflection_;
  delete MsgGTRegisterLG::default_instance_;
  delete MsgGTRegisterLG_reflection_;
}

void protobuf_AddDesc_msg_5fgate_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::msgs2s::protobuf_AddDesc_msgs2s_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024msg_gate_login.proto\022\006msgs2s\032\014msgs2s.p"
    "roto\",\n\010GTLGData\022\017\n\007account\030\001 \002(\r\022\017\n\007tra"
    "nsid\030\002 \002(\r\"3\n\021MsgLN2GTUserLogin\022\036\n\004data\030"
    "\001 \002(\0132\020.msgs2s.GTLGData\"2\n\020MsgLN2GTKickU"
    "ser\022\036\n\004data\030\001 \002(\0132\020.msgs2s.GTLGData\"\"\n\017M"
    "sgGT2LNOnlines\022\017\n\007onlines\030\001 \002(\r\"!\n\016MsgGT"
    "2LNPrepar\022\017\n\007account\030\001 \002(\r\"|\n\017MsgGTRegis"
    "terLG\022+\n\010GateInfo\030\001 \002(\0132\031.msgs2s.MsgServ"
    "erRegister\022\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002(\r\022\"\n\010"
    "Accounts\030\004 \003(\0132\020.msgs2s.GTLGData", 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_gate_login.proto", &protobuf_RegisterTypes);
  GTLGData::default_instance_ = new GTLGData();
  MsgLN2GTUserLogin::default_instance_ = new MsgLN2GTUserLogin();
  MsgLN2GTKickUser::default_instance_ = new MsgLN2GTKickUser();
  MsgGT2LNOnlines::default_instance_ = new MsgGT2LNOnlines();
  MsgGT2LNPrepar::default_instance_ = new MsgGT2LNPrepar();
  MsgGTRegisterLG::default_instance_ = new MsgGTRegisterLG();
  GTLGData::default_instance_->InitAsDefaultInstance();
  MsgLN2GTUserLogin::default_instance_->InitAsDefaultInstance();
  MsgLN2GTKickUser::default_instance_->InitAsDefaultInstance();
  MsgGT2LNOnlines::default_instance_->InitAsDefaultInstance();
  MsgGT2LNPrepar::default_instance_->InitAsDefaultInstance();
  MsgGTRegisterLG::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fgate_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fgate_5flogin_2eproto {
  StaticDescriptorInitializer_msg_5fgate_5flogin_2eproto() {
    protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  }
} static_descriptor_initializer_msg_5fgate_5flogin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GTLGData::kAccountFieldNumber;
const int GTLGData::kTransidFieldNumber;
#endif  // !_MSC_VER

GTLGData::GTLGData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTLGData::InitAsDefaultInstance() {
}

GTLGData::GTLGData(const GTLGData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTLGData::SharedCtor() {
  _cached_size_ = 0;
  account_ = 0u;
  transid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTLGData::~GTLGData() {
  SharedDtor();
}

void GTLGData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTLGData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTLGData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTLGData_descriptor_;
}

const GTLGData& GTLGData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

GTLGData* GTLGData::default_instance_ = NULL;

GTLGData* GTLGData::New() const {
  return new GTLGData;
}

void GTLGData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_ = 0u;
    transid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTLGData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transid;
        break;
      }

      // required uint32 transid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTLGData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account(), output);
  }

  // required uint32 transid = 2;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->transid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTLGData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account(), target);
  }

  // required uint32 transid = 2;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->transid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTLGData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account());
    }

    // required uint32 transid = 2;
    if (has_transid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTLGData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTLGData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTLGData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTLGData::MergeFrom(const GTLGData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTLGData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTLGData::CopyFrom(const GTLGData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTLGData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTLGData::Swap(GTLGData* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTLGData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTLGData_descriptor_;
  metadata.reflection = GTLGData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLN2GTUserLogin::kDataFieldNumber;
#endif  // !_MSC_VER

MsgLN2GTUserLogin::MsgLN2GTUserLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgLN2GTUserLogin::InitAsDefaultInstance() {
  data_ = const_cast< ::msgs2s::GTLGData*>(&::msgs2s::GTLGData::default_instance());
}

MsgLN2GTUserLogin::MsgLN2GTUserLogin(const MsgLN2GTUserLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgLN2GTUserLogin::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLN2GTUserLogin::~MsgLN2GTUserLogin() {
  SharedDtor();
}

void MsgLN2GTUserLogin::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgLN2GTUserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLN2GTUserLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLN2GTUserLogin_descriptor_;
}

const MsgLN2GTUserLogin& MsgLN2GTUserLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

MsgLN2GTUserLogin* MsgLN2GTUserLogin::default_instance_ = NULL;

MsgLN2GTUserLogin* MsgLN2GTUserLogin::New() const {
  return new MsgLN2GTUserLogin;
}

void MsgLN2GTUserLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::msgs2s::GTLGData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLN2GTUserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msgs2s.GTLGData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLN2GTUserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .msgs2s.GTLGData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLN2GTUserLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .msgs2s.GTLGData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLN2GTUserLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .msgs2s.GTLGData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLN2GTUserLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLN2GTUserLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLN2GTUserLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLN2GTUserLogin::MergeFrom(const MsgLN2GTUserLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::msgs2s::GTLGData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLN2GTUserLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLN2GTUserLogin::CopyFrom(const MsgLN2GTUserLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLN2GTUserLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void MsgLN2GTUserLogin::Swap(MsgLN2GTUserLogin* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLN2GTUserLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLN2GTUserLogin_descriptor_;
  metadata.reflection = MsgLN2GTUserLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLN2GTKickUser::kDataFieldNumber;
#endif  // !_MSC_VER

MsgLN2GTKickUser::MsgLN2GTKickUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgLN2GTKickUser::InitAsDefaultInstance() {
  data_ = const_cast< ::msgs2s::GTLGData*>(&::msgs2s::GTLGData::default_instance());
}

MsgLN2GTKickUser::MsgLN2GTKickUser(const MsgLN2GTKickUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgLN2GTKickUser::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLN2GTKickUser::~MsgLN2GTKickUser() {
  SharedDtor();
}

void MsgLN2GTKickUser::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgLN2GTKickUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLN2GTKickUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLN2GTKickUser_descriptor_;
}

const MsgLN2GTKickUser& MsgLN2GTKickUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

MsgLN2GTKickUser* MsgLN2GTKickUser::default_instance_ = NULL;

MsgLN2GTKickUser* MsgLN2GTKickUser::New() const {
  return new MsgLN2GTKickUser;
}

void MsgLN2GTKickUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::msgs2s::GTLGData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLN2GTKickUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msgs2s.GTLGData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLN2GTKickUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .msgs2s.GTLGData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLN2GTKickUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .msgs2s.GTLGData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLN2GTKickUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .msgs2s.GTLGData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLN2GTKickUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLN2GTKickUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLN2GTKickUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLN2GTKickUser::MergeFrom(const MsgLN2GTKickUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::msgs2s::GTLGData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLN2GTKickUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLN2GTKickUser::CopyFrom(const MsgLN2GTKickUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLN2GTKickUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void MsgLN2GTKickUser::Swap(MsgLN2GTKickUser* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLN2GTKickUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLN2GTKickUser_descriptor_;
  metadata.reflection = MsgLN2GTKickUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGT2LNOnlines::kOnlinesFieldNumber;
#endif  // !_MSC_VER

MsgGT2LNOnlines::MsgGT2LNOnlines()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGT2LNOnlines::InitAsDefaultInstance() {
}

MsgGT2LNOnlines::MsgGT2LNOnlines(const MsgGT2LNOnlines& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGT2LNOnlines::SharedCtor() {
  _cached_size_ = 0;
  onlines_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGT2LNOnlines::~MsgGT2LNOnlines() {
  SharedDtor();
}

void MsgGT2LNOnlines::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGT2LNOnlines::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGT2LNOnlines::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGT2LNOnlines_descriptor_;
}

const MsgGT2LNOnlines& MsgGT2LNOnlines::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

MsgGT2LNOnlines* MsgGT2LNOnlines::default_instance_ = NULL;

MsgGT2LNOnlines* MsgGT2LNOnlines::New() const {
  return new MsgGT2LNOnlines;
}

void MsgGT2LNOnlines::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    onlines_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGT2LNOnlines::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 onlines = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlines_)));
          set_has_onlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGT2LNOnlines::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 onlines = 1;
  if (has_onlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->onlines(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGT2LNOnlines::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 onlines = 1;
  if (has_onlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->onlines(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGT2LNOnlines::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 onlines = 1;
    if (has_onlines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlines());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGT2LNOnlines::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGT2LNOnlines* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGT2LNOnlines*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGT2LNOnlines::MergeFrom(const MsgGT2LNOnlines& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onlines()) {
      set_onlines(from.onlines());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGT2LNOnlines::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGT2LNOnlines::CopyFrom(const MsgGT2LNOnlines& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGT2LNOnlines::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgGT2LNOnlines::Swap(MsgGT2LNOnlines* other) {
  if (other != this) {
    std::swap(onlines_, other->onlines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGT2LNOnlines::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGT2LNOnlines_descriptor_;
  metadata.reflection = MsgGT2LNOnlines_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGT2LNPrepar::kAccountFieldNumber;
#endif  // !_MSC_VER

MsgGT2LNPrepar::MsgGT2LNPrepar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGT2LNPrepar::InitAsDefaultInstance() {
}

MsgGT2LNPrepar::MsgGT2LNPrepar(const MsgGT2LNPrepar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGT2LNPrepar::SharedCtor() {
  _cached_size_ = 0;
  account_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGT2LNPrepar::~MsgGT2LNPrepar() {
  SharedDtor();
}

void MsgGT2LNPrepar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGT2LNPrepar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGT2LNPrepar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGT2LNPrepar_descriptor_;
}

const MsgGT2LNPrepar& MsgGT2LNPrepar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

MsgGT2LNPrepar* MsgGT2LNPrepar::default_instance_ = NULL;

MsgGT2LNPrepar* MsgGT2LNPrepar::New() const {
  return new MsgGT2LNPrepar;
}

void MsgGT2LNPrepar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGT2LNPrepar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGT2LNPrepar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGT2LNPrepar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGT2LNPrepar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGT2LNPrepar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGT2LNPrepar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGT2LNPrepar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGT2LNPrepar::MergeFrom(const MsgGT2LNPrepar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGT2LNPrepar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGT2LNPrepar::CopyFrom(const MsgGT2LNPrepar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGT2LNPrepar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgGT2LNPrepar::Swap(MsgGT2LNPrepar* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGT2LNPrepar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGT2LNPrepar_descriptor_;
  metadata.reflection = MsgGT2LNPrepar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGTRegisterLG::kGateInfoFieldNumber;
const int MsgGTRegisterLG::kIpFieldNumber;
const int MsgGTRegisterLG::kPortFieldNumber;
const int MsgGTRegisterLG::kAccountsFieldNumber;
#endif  // !_MSC_VER

MsgGTRegisterLG::MsgGTRegisterLG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGTRegisterLG::InitAsDefaultInstance() {
  gateinfo_ = const_cast< ::msgs2s::MsgServerRegister*>(&::msgs2s::MsgServerRegister::default_instance());
}

MsgGTRegisterLG::MsgGTRegisterLG(const MsgGTRegisterLG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGTRegisterLG::SharedCtor() {
  _cached_size_ = 0;
  gateinfo_ = NULL;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGTRegisterLG::~MsgGTRegisterLG() {
  SharedDtor();
}

void MsgGTRegisterLG::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete gateinfo_;
  }
}

void MsgGTRegisterLG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGTRegisterLG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGTRegisterLG_descriptor_;
}

const MsgGTRegisterLG& MsgGTRegisterLG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  return *default_instance_;
}

MsgGTRegisterLG* MsgGTRegisterLG::default_instance_ = NULL;

MsgGTRegisterLG* MsgGTRegisterLG::New() const {
  return new MsgGTRegisterLG;
}

void MsgGTRegisterLG::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gateinfo()) {
      if (gateinfo_ != NULL) gateinfo_->::msgs2s::MsgServerRegister::Clear();
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  accounts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGTRegisterLG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msgs2s.MsgServerRegister GateInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gateinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Accounts;
        break;
      }

      // repeated .msgs2s.GTLGData Accounts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Accounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accounts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Accounts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGTRegisterLG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .msgs2s.MsgServerRegister GateInfo = 1;
  if (has_gateinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gateinfo(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // repeated .msgs2s.GTLGData Accounts = 4;
  for (int i = 0; i < this->accounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->accounts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGTRegisterLG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .msgs2s.MsgServerRegister GateInfo = 1;
  if (has_gateinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gateinfo(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // repeated .msgs2s.GTLGData Accounts = 4;
  for (int i = 0; i < this->accounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->accounts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGTRegisterLG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .msgs2s.MsgServerRegister GateInfo = 1;
    if (has_gateinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gateinfo());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  // repeated .msgs2s.GTLGData Accounts = 4;
  total_size += 1 * this->accounts_size();
  for (int i = 0; i < this->accounts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accounts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGTRegisterLG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGTRegisterLG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGTRegisterLG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGTRegisterLG::MergeFrom(const MsgGTRegisterLG& from) {
  GOOGLE_CHECK_NE(&from, this);
  accounts_.MergeFrom(from.accounts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateinfo()) {
      mutable_gateinfo()->::msgs2s::MsgServerRegister::MergeFrom(from.gateinfo());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGTRegisterLG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGTRegisterLG::CopyFrom(const MsgGTRegisterLG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGTRegisterLG::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_gateinfo()) {
    if (!this->gateinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < accounts_size(); i++) {
    if (!this->accounts(i).IsInitialized()) return false;
  }
  return true;
}

void MsgGTRegisterLG::Swap(MsgGTRegisterLG* other) {
  if (other != this) {
    std::swap(gateinfo_, other->gateinfo_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    accounts_.Swap(&other->accounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGTRegisterLG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGTRegisterLG_descriptor_;
  metadata.reflection = MsgGTRegisterLG_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs2s

// @@protoc_insertion_point(global_scope)
