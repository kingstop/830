// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_define.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "player_define.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msgs2s {

namespace {

const ::google::protobuf::Descriptor* PlayerSCData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSCData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSSData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSSData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInvite_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_player_5fdefine_2eproto() {
  protobuf_AddDesc_player_5fdefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "player_define.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerSCData_descriptor_ = file->message_type(0);
  static const int PlayerSCData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, head_),
  };
  PlayerSCData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSCData_descriptor_,
      PlayerSCData::default_instance_,
      PlayerSCData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSCData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSCData));
  PlayerSSData_descriptor_ = file->message_type(1);
  static const int PlayerSSData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSSData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSSData, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSSData, createtime_),
  };
  PlayerSSData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSSData_descriptor_,
      PlayerSSData::default_instance_,
      PlayerSSData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSSData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSSData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSSData));
  PlayerInfo_descriptor_ = file->message_type(2);
  static const int PlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, sc_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, ss_data_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  PlayerMail_descriptor_ = file->message_type(3);
  static const int PlayerMail_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, reciver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, createtime_),
  };
  PlayerMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMail_descriptor_,
      PlayerMail::default_instance_,
      PlayerMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMail));
  PlayerRelation_descriptor_ = file->message_type(4);
  static const int PlayerRelation_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelation, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelation, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelation, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelation, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelation, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelation, online_),
  };
  PlayerRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRelation_descriptor_,
      PlayerRelation::default_instance_,
      PlayerRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRelation));
  PlayerInvite_descriptor_ = file->message_type(5);
  static const int PlayerInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInvite, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInvite, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInvite, group_),
  };
  PlayerInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInvite_descriptor_,
      PlayerInvite::default_instance_,
      PlayerInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInvite));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_player_5fdefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSCData_descriptor_, &PlayerSCData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSSData_descriptor_, &PlayerSSData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMail_descriptor_, &PlayerMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRelation_descriptor_, &PlayerRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInvite_descriptor_, &PlayerInvite::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_player_5fdefine_2eproto() {
  delete PlayerSCData::default_instance_;
  delete PlayerSCData_reflection_;
  delete PlayerSSData::default_instance_;
  delete PlayerSSData_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete PlayerMail::default_instance_;
  delete PlayerMail_reflection_;
  delete PlayerRelation::default_instance_;
  delete PlayerRelation_reflection_;
  delete PlayerInvite::default_instance_;
  delete PlayerInvite_reflection_;
}

void protobuf_AddDesc_player_5fdefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023player_define.proto\022\006msgs2s\"\231\001\n\014Player"
    "SCData\022\014\n\004guid\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\014\n\004ty"
    "pe\030\003 \002(\r\022\013\n\003sex\030\004 \002(\r\022\r\n\005mapid\030\005 \002(\r\022\014\n\004"
    "posx\030\006 \002(\002\022\014\n\004posy\030\007 \002(\002\022\013\n\003dir\030\010 \002(\002\022\014\n"
    "\004city\030\t \002(\r\022\014\n\004head\030\n \002(\r\"A\n\014PlayerSSDat"
    "a\022\017\n\007account\030\001 \002(\r\022\014\n\004flag\030\002 \002(\r\022\022\n\ncrea"
    "tetime\030\003 \002(\r\"Z\n\nPlayerInfo\022%\n\007sc_data\030\001 "
    "\002(\0132\024.msgs2s.PlayerSCData\022%\n\007ss_data\030\002 \002"
    "(\0132\024.msgs2s.PlayerSSData\"\226\001\n\nPlayerMail\022"
    "\016\n\006mailid\030\001 \002(\r\022\016\n\006sender\030\002 \002(\r\022\022\n\nsende"
    "rName\030\003 \002(\t\022\017\n\007reciver\030\004 \002(\r\022\020\n\010mailtype"
    "\030\005 \002(\r\022\017\n\007content\030\006 \002(\t\022\014\n\004flag\030\007 \002(\r\022\022\n"
    "\ncreatetime\030\010 \002(\r\"\206\001\n\016PlayerRelation\022\014\n\004"
    "guid\030\001 \002(\r\022\020\n\010relation\030\002 \002(\r\022\014\n\004mark\030\003 \001"
    "(\t\022\r\n\005group\030\004 \002(\r\022\013\n\003sex\030\005 \002(\r\022\014\n\004name\030\006"
    " \002(\t\022\014\n\004type\030\007 \002(\r\022\016\n\006online\030\010 \002(\010\"9\n\014Pl"
    "ayerInvite\022\014\n\004guid\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\r"
    "\n\005group\030\003 \002(\r", 693);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player_define.proto", &protobuf_RegisterTypes);
  PlayerSCData::default_instance_ = new PlayerSCData();
  PlayerSSData::default_instance_ = new PlayerSSData();
  PlayerInfo::default_instance_ = new PlayerInfo();
  PlayerMail::default_instance_ = new PlayerMail();
  PlayerRelation::default_instance_ = new PlayerRelation();
  PlayerInvite::default_instance_ = new PlayerInvite();
  PlayerSCData::default_instance_->InitAsDefaultInstance();
  PlayerSSData::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  PlayerMail::default_instance_->InitAsDefaultInstance();
  PlayerRelation::default_instance_->InitAsDefaultInstance();
  PlayerInvite::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_player_5fdefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_player_5fdefine_2eproto {
  StaticDescriptorInitializer_player_5fdefine_2eproto() {
    protobuf_AddDesc_player_5fdefine_2eproto();
  }
} static_descriptor_initializer_player_5fdefine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerSCData::kGuidFieldNumber;
const int PlayerSCData::kNameFieldNumber;
const int PlayerSCData::kTypeFieldNumber;
const int PlayerSCData::kSexFieldNumber;
const int PlayerSCData::kMapidFieldNumber;
const int PlayerSCData::kPosxFieldNumber;
const int PlayerSCData::kPosyFieldNumber;
const int PlayerSCData::kDirFieldNumber;
const int PlayerSCData::kCityFieldNumber;
const int PlayerSCData::kHeadFieldNumber;
#endif  // !_MSC_VER

PlayerSCData::PlayerSCData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSCData::InitAsDefaultInstance() {
}

PlayerSCData::PlayerSCData(const PlayerSCData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSCData::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  sex_ = 0u;
  mapid_ = 0u;
  posx_ = 0;
  posy_ = 0;
  dir_ = 0;
  city_ = 0u;
  head_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSCData::~PlayerSCData() {
  SharedDtor();
}

void PlayerSCData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerSCData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSCData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSCData_descriptor_;
}

const PlayerSCData& PlayerSCData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_5fdefine_2eproto();
  return *default_instance_;
}

PlayerSCData* PlayerSCData::default_instance_ = NULL;

PlayerSCData* PlayerSCData::New() const {
  return new PlayerSCData;
}

void PlayerSCData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    sex_ = 0u;
    mapid_ = 0u;
    posx_ = 0;
    posy_ = 0;
    dir_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    city_ = 0u;
    head_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSCData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // required uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // required uint32 mapid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_posx;
        break;
      }

      // required float posx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_posy;
        break;
      }

      // required float posy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_dir;
        break;
      }

      // required float dir = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_city;
        break;
      }

      // required uint32 city = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_)));
          set_has_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_head;
        break;
      }

      // required uint32 head = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSCData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // required uint32 mapid = 5;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mapid(), output);
  }

  // required float posx = 6;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->posx(), output);
  }

  // required float posy = 7;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->posy(), output);
  }

  // required float dir = 8;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->dir(), output);
  }

  // required uint32 city = 9;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->city(), output);
  }

  // required uint32 head = 10;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSCData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // required uint32 mapid = 5;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mapid(), target);
  }

  // required float posx = 6;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->posx(), target);
  }

  // required float posy = 7;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->posy(), target);
  }

  // required float dir = 8;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->dir(), target);
  }

  // required uint32 city = 9;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->city(), target);
  }

  // required uint32 head = 10;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSCData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // required uint32 mapid = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required float posx = 6;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // required float posy = 7;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // required float dir = 8;
    if (has_dir()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 city = 9;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city());
    }

    // required uint32 head = 10;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSCData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSCData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSCData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSCData::MergeFrom(const PlayerSCData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSCData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSCData::CopyFrom(const PlayerSCData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSCData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void PlayerSCData::Swap(PlayerSCData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(sex_, other->sex_);
    std::swap(mapid_, other->mapid_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(dir_, other->dir_);
    std::swap(city_, other->city_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSCData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSCData_descriptor_;
  metadata.reflection = PlayerSCData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSSData::kAccountFieldNumber;
const int PlayerSSData::kFlagFieldNumber;
const int PlayerSSData::kCreatetimeFieldNumber;
#endif  // !_MSC_VER

PlayerSSData::PlayerSSData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSSData::InitAsDefaultInstance() {
}

PlayerSSData::PlayerSSData(const PlayerSSData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSSData::SharedCtor() {
  _cached_size_ = 0;
  account_ = 0u;
  flag_ = 0u;
  createtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSSData::~PlayerSSData() {
  SharedDtor();
}

void PlayerSSData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSSData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSSData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSSData_descriptor_;
}

const PlayerSSData& PlayerSSData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_5fdefine_2eproto();
  return *default_instance_;
}

PlayerSSData* PlayerSSData::default_instance_ = NULL;

PlayerSSData* PlayerSSData::New() const {
  return new PlayerSSData;
}

void PlayerSSData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    account_ = 0u;
    flag_ = 0u;
    createtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSSData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
          set_has_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_createtime;
        break;
      }

      // required uint32 createtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSSData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account(), output);
  }

  // required uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // required uint32 createtime = 3;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSSData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account(), target);
  }

  // required uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // required uint32 createtime = 3;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSSData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account());
    }

    // required uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required uint32 createtime = 3;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSSData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSSData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSSData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSSData::MergeFrom(const PlayerSSData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSSData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSSData::CopyFrom(const PlayerSSData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSSData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlayerSSData::Swap(PlayerSSData* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(flag_, other->flag_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSSData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSSData_descriptor_;
  metadata.reflection = PlayerSSData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kScDataFieldNumber;
const int PlayerInfo::kSsDataFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
  sc_data_ = const_cast< ::msgs2s::PlayerSCData*>(&::msgs2s::PlayerSCData::default_instance());
  ss_data_ = const_cast< ::msgs2s::PlayerSSData*>(&::msgs2s::PlayerSSData::default_instance());
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  sc_data_ = NULL;
  ss_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete sc_data_;
    delete ss_data_;
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_5fdefine_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sc_data()) {
      if (sc_data_ != NULL) sc_data_->::msgs2s::PlayerSCData::Clear();
    }
    if (has_ss_data()) {
      if (ss_data_ != NULL) ss_data_->::msgs2s::PlayerSSData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msgs2s.PlayerSCData sc_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sc_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ss_data;
        break;
      }

      // required .msgs2s.PlayerSSData ss_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ss_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ss_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .msgs2s.PlayerSCData sc_data = 1;
  if (has_sc_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sc_data(), output);
  }

  // required .msgs2s.PlayerSSData ss_data = 2;
  if (has_ss_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ss_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .msgs2s.PlayerSCData sc_data = 1;
  if (has_sc_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sc_data(), target);
  }

  // required .msgs2s.PlayerSSData ss_data = 2;
  if (has_ss_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ss_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .msgs2s.PlayerSCData sc_data = 1;
    if (has_sc_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sc_data());
    }

    // required .msgs2s.PlayerSSData ss_data = 2;
    if (has_ss_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ss_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sc_data()) {
      mutable_sc_data()->::msgs2s::PlayerSCData::MergeFrom(from.sc_data());
    }
    if (from.has_ss_data()) {
      mutable_ss_data()->::msgs2s::PlayerSSData::MergeFrom(from.ss_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_sc_data()) {
    if (!this->sc_data().IsInitialized()) return false;
  }
  if (has_ss_data()) {
    if (!this->ss_data().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(sc_data_, other->sc_data_);
    std::swap(ss_data_, other->ss_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMail::kMailidFieldNumber;
const int PlayerMail::kSenderFieldNumber;
const int PlayerMail::kSenderNameFieldNumber;
const int PlayerMail::kReciverFieldNumber;
const int PlayerMail::kMailtypeFieldNumber;
const int PlayerMail::kContentFieldNumber;
const int PlayerMail::kFlagFieldNumber;
const int PlayerMail::kCreatetimeFieldNumber;
#endif  // !_MSC_VER

PlayerMail::PlayerMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMail::InitAsDefaultInstance() {
}

PlayerMail::PlayerMail(const PlayerMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  sender_ = 0u;
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reciver_ = 0u;
  mailtype_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0u;
  createtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMail::~PlayerMail() {
  SharedDtor();
}

void PlayerMail::SharedDtor() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void PlayerMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMail_descriptor_;
}

const PlayerMail& PlayerMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_5fdefine_2eproto();
  return *default_instance_;
}

PlayerMail* PlayerMail::default_instance_ = NULL;

PlayerMail* PlayerMail::New() const {
  return new PlayerMail;
}

void PlayerMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    sender_ = 0u;
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    reciver_ = 0u;
    mailtype_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    flag_ = 0u;
    createtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sender;
        break;
      }

      // required uint32 sender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sender_)));
          set_has_sender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_senderName;
        break;
      }

      // required string senderName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reciver;
        break;
      }

      // required uint32 reciver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reciver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reciver_)));
          set_has_reciver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mailtype;
        break;
      }

      // required uint32 mailtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // required string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flag;
        break;
      }

      // required uint32 flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_createtime;
        break;
      }

      // required uint32 createtime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  // required uint32 sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sender(), output);
  }

  // required string senderName = 3;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sendername(), output);
  }

  // required uint32 reciver = 4;
  if (has_reciver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reciver(), output);
  }

  // required uint32 mailtype = 5;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mailtype(), output);
  }

  // required string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // required uint32 flag = 7;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flag(), output);
  }

  // required uint32 createtime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  // required uint32 sender = 2;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sender(), target);
  }

  // required string senderName = 3;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sendername(), target);
  }

  // required uint32 reciver = 4;
  if (has_reciver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reciver(), target);
  }

  // required uint32 mailtype = 5;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mailtype(), target);
  }

  // required string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // required uint32 flag = 7;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flag(), target);
  }

  // required uint32 createtime = 8;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

    // required uint32 sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sender());
    }

    // required string senderName = 3;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // required uint32 reciver = 4;
    if (has_reciver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reciver());
    }

    // required uint32 mailtype = 5;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // required string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required uint32 flag = 7;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required uint32 createtime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMail::MergeFrom(const PlayerMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_reciver()) {
      set_reciver(from.reciver());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMail::CopyFrom(const PlayerMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void PlayerMail::Swap(PlayerMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(sender_, other->sender_);
    std::swap(sendername_, other->sendername_);
    std::swap(reciver_, other->reciver_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(content_, other->content_);
    std::swap(flag_, other->flag_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMail_descriptor_;
  metadata.reflection = PlayerMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRelation::kGuidFieldNumber;
const int PlayerRelation::kRelationFieldNumber;
const int PlayerRelation::kMarkFieldNumber;
const int PlayerRelation::kGroupFieldNumber;
const int PlayerRelation::kSexFieldNumber;
const int PlayerRelation::kNameFieldNumber;
const int PlayerRelation::kTypeFieldNumber;
const int PlayerRelation::kOnlineFieldNumber;
#endif  // !_MSC_VER

PlayerRelation::PlayerRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRelation::InitAsDefaultInstance() {
}

PlayerRelation::PlayerRelation(const PlayerRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRelation::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0u;
  relation_ = 0u;
  mark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_ = 0u;
  sex_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRelation::~PlayerRelation() {
  SharedDtor();
}

void PlayerRelation::SharedDtor() {
  if (mark_ != &::google::protobuf::internal::kEmptyString) {
    delete mark_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRelation_descriptor_;
}

const PlayerRelation& PlayerRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_5fdefine_2eproto();
  return *default_instance_;
}

PlayerRelation* PlayerRelation::default_instance_ = NULL;

PlayerRelation* PlayerRelation::New() const {
  return new PlayerRelation;
}

void PlayerRelation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0u;
    relation_ = 0u;
    if (has_mark()) {
      if (mark_ != &::google::protobuf::internal::kEmptyString) {
        mark_->clear();
      }
    }
    group_ = 0u;
    sex_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_relation;
        break;
      }

      // required uint32 relation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mark;
        break;
      }

      // optional string mark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mark().data(), this->mark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_group;
        break;
      }

      // required uint32 group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // required uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // required string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // required uint32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_online;
        break;
      }

      // required bool online = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guid(), output);
  }

  // required uint32 relation = 2;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->relation(), output);
  }

  // optional string mark = 3;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mark().data(), this->mark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mark(), output);
  }

  // required uint32 group = 4;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group(), output);
  }

  // required uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // required uint32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->type(), output);
  }

  // required bool online = 8;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guid(), target);
  }

  // required uint32 relation = 2;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->relation(), target);
  }

  // optional string mark = 3;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mark().data(), this->mark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mark(), target);
  }

  // required uint32 group = 4;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group(), target);
  }

  // required uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // required uint32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->type(), target);
  }

  // required bool online = 8;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guid());
    }

    // required uint32 relation = 2;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relation());
    }

    // optional string mark = 3;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mark());
    }

    // required uint32 group = 4;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // required uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // required string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required bool online = 8;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRelation::MergeFrom(const PlayerRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRelation::CopyFrom(const PlayerRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRelation::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fb) != 0x000000fb) return false;

  return true;
}

void PlayerRelation::Swap(PlayerRelation* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(relation_, other->relation_);
    std::swap(mark_, other->mark_);
    std::swap(group_, other->group_);
    std::swap(sex_, other->sex_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRelation_descriptor_;
  metadata.reflection = PlayerRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInvite::kGuidFieldNumber;
const int PlayerInvite::kNameFieldNumber;
const int PlayerInvite::kGroupFieldNumber;
#endif  // !_MSC_VER

PlayerInvite::PlayerInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInvite::InitAsDefaultInstance() {
}

PlayerInvite::PlayerInvite(const PlayerInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInvite::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInvite::~PlayerInvite() {
  SharedDtor();
}

void PlayerInvite::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInvite_descriptor_;
}

const PlayerInvite& PlayerInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_5fdefine_2eproto();
  return *default_instance_;
}

PlayerInvite* PlayerInvite::default_instance_ = NULL;

PlayerInvite* PlayerInvite::New() const {
  return new PlayerInvite;
}

void PlayerInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    group_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_group;
        break;
      }

      // required uint32 group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInvite::MergeFrom(const PlayerInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInvite::CopyFrom(const PlayerInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlayerInvite::Swap(PlayerInvite* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInvite_descriptor_;
  metadata.reflection = PlayerInvite_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs2s

// @@protoc_insertion_point(global_scope)
