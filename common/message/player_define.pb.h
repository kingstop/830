// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_define.proto

#ifndef PROTOBUF_player_5fdefine_2eproto__INCLUDED
#define PROTOBUF_player_5fdefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace msgs2s {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_player_5fdefine_2eproto();
void protobuf_AssignDesc_player_5fdefine_2eproto();
void protobuf_ShutdownFile_player_5fdefine_2eproto();

class PlayerSCData;
class PlayerSSData;
class PlayerInfo;
class PlayerMail;
class PlayerRelation;
class PlayerInvite;

// ===================================================================

class PlayerSCData : public ::google::protobuf::Message {
 public:
  PlayerSCData();
  virtual ~PlayerSCData();

  PlayerSCData(const PlayerSCData& from);

  inline PlayerSCData& operator=(const PlayerSCData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSCData& default_instance();

  void Swap(PlayerSCData* other);

  // implements Message ----------------------------------------------

  PlayerSCData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSCData& from);
  void MergeFrom(const PlayerSCData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint32 guid() const;
  inline void set_guid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // required uint32 mapid = 5;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 5;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // required float posx = 6;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 6;
  inline float posx() const;
  inline void set_posx(float value);

  // required float posy = 7;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 7;
  inline float posy() const;
  inline void set_posy(float value);

  // required float dir = 8;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 8;
  inline float dir() const;
  inline void set_dir(float value);

  // required uint32 city = 9;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 9;
  inline ::google::protobuf::uint32 city() const;
  inline void set_city(::google::protobuf::uint32 value);

  // required uint32 head = 10;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 10;
  inline ::google::protobuf::uint32 head() const;
  inline void set_head(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:msgs2s.PlayerSCData)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 guid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 mapid_;
  float posx_;
  float posy_;
  float dir_;
  ::google::protobuf::uint32 city_;
  ::google::protobuf::uint32 head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_player_5fdefine_2eproto();
  friend void protobuf_AssignDesc_player_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_player_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PlayerSCData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSSData : public ::google::protobuf::Message {
 public:
  PlayerSSData();
  virtual ~PlayerSSData();

  PlayerSSData(const PlayerSSData& from);

  inline PlayerSSData& operator=(const PlayerSSData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSSData& default_instance();

  void Swap(PlayerSSData* other);

  // implements Message ----------------------------------------------

  PlayerSSData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSSData& from);
  void MergeFrom(const PlayerSSData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline ::google::protobuf::uint32 account() const;
  inline void set_account(::google::protobuf::uint32 value);

  // required uint32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // required uint32 createtime = 3;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 3;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:msgs2s.PlayerSSData)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 account_;
  ::google::protobuf::uint32 flag_;
  ::google::protobuf::uint32 createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_player_5fdefine_2eproto();
  friend void protobuf_AssignDesc_player_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_player_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PlayerSSData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfo : public ::google::protobuf::Message {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();

  void Swap(PlayerInfo* other);

  // implements Message ----------------------------------------------

  PlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .msgs2s.PlayerSCData sc_data = 1;
  inline bool has_sc_data() const;
  inline void clear_sc_data();
  static const int kScDataFieldNumber = 1;
  inline const ::msgs2s::PlayerSCData& sc_data() const;
  inline ::msgs2s::PlayerSCData* mutable_sc_data();
  inline ::msgs2s::PlayerSCData* release_sc_data();
  inline void set_allocated_sc_data(::msgs2s::PlayerSCData* sc_data);

  // required .msgs2s.PlayerSSData ss_data = 2;
  inline bool has_ss_data() const;
  inline void clear_ss_data();
  static const int kSsDataFieldNumber = 2;
  inline const ::msgs2s::PlayerSSData& ss_data() const;
  inline ::msgs2s::PlayerSSData* mutable_ss_data();
  inline ::msgs2s::PlayerSSData* release_ss_data();
  inline void set_allocated_ss_data(::msgs2s::PlayerSSData* ss_data);

  // @@protoc_insertion_point(class_scope:msgs2s.PlayerInfo)
 private:
  inline void set_has_sc_data();
  inline void clear_has_sc_data();
  inline void set_has_ss_data();
  inline void clear_has_ss_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::msgs2s::PlayerSCData* sc_data_;
  ::msgs2s::PlayerSSData* ss_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_player_5fdefine_2eproto();
  friend void protobuf_AssignDesc_player_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_player_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerMail : public ::google::protobuf::Message {
 public:
  PlayerMail();
  virtual ~PlayerMail();

  PlayerMail(const PlayerMail& from);

  inline PlayerMail& operator=(const PlayerMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMail& default_instance();

  void Swap(PlayerMail* other);

  // implements Message ----------------------------------------------

  PlayerMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerMail& from);
  void MergeFrom(const PlayerMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mailid = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 1;
  inline ::google::protobuf::uint32 mailid() const;
  inline void set_mailid(::google::protobuf::uint32 value);

  // required uint32 sender = 2;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 2;
  inline ::google::protobuf::uint32 sender() const;
  inline void set_sender(::google::protobuf::uint32 value);

  // required string senderName = 3;
  inline bool has_sendername() const;
  inline void clear_sendername();
  static const int kSenderNameFieldNumber = 3;
  inline const ::std::string& sendername() const;
  inline void set_sendername(const ::std::string& value);
  inline void set_sendername(const char* value);
  inline void set_sendername(const char* value, size_t size);
  inline ::std::string* mutable_sendername();
  inline ::std::string* release_sendername();
  inline void set_allocated_sendername(::std::string* sendername);

  // required uint32 reciver = 4;
  inline bool has_reciver() const;
  inline void clear_reciver();
  static const int kReciverFieldNumber = 4;
  inline ::google::protobuf::uint32 reciver() const;
  inline void set_reciver(::google::protobuf::uint32 value);

  // required uint32 mailtype = 5;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailtypeFieldNumber = 5;
  inline ::google::protobuf::uint32 mailtype() const;
  inline void set_mailtype(::google::protobuf::uint32 value);

  // required string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required uint32 flag = 7;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 7;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // required uint32 createtime = 8;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 8;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:msgs2s.PlayerMail)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_sendername();
  inline void clear_has_sendername();
  inline void set_has_reciver();
  inline void clear_has_reciver();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mailid_;
  ::google::protobuf::uint32 sender_;
  ::std::string* sendername_;
  ::google::protobuf::uint32 reciver_;
  ::google::protobuf::uint32 mailtype_;
  ::std::string* content_;
  ::google::protobuf::uint32 flag_;
  ::google::protobuf::uint32 createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_player_5fdefine_2eproto();
  friend void protobuf_AssignDesc_player_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_player_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PlayerMail* default_instance_;
};
// -------------------------------------------------------------------

class PlayerRelation : public ::google::protobuf::Message {
 public:
  PlayerRelation();
  virtual ~PlayerRelation();

  PlayerRelation(const PlayerRelation& from);

  inline PlayerRelation& operator=(const PlayerRelation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRelation& default_instance();

  void Swap(PlayerRelation* other);

  // implements Message ----------------------------------------------

  PlayerRelation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerRelation& from);
  void MergeFrom(const PlayerRelation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint32 guid() const;
  inline void set_guid(::google::protobuf::uint32 value);

  // required uint32 relation = 2;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 2;
  inline ::google::protobuf::uint32 relation() const;
  inline void set_relation(::google::protobuf::uint32 value);

  // optional string mark = 3;
  inline bool has_mark() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 3;
  inline const ::std::string& mark() const;
  inline void set_mark(const ::std::string& value);
  inline void set_mark(const char* value);
  inline void set_mark(const char* value, size_t size);
  inline ::std::string* mutable_mark();
  inline ::std::string* release_mark();
  inline void set_allocated_mark(::std::string* mark);

  // required uint32 group = 4;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 4;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // required uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // required string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required bool online = 8;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 8;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:msgs2s.PlayerRelation)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_relation();
  inline void clear_has_relation();
  inline void set_has_mark();
  inline void clear_has_mark();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guid_;
  ::google::protobuf::uint32 relation_;
  ::std::string* mark_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 sex_;
  ::std::string* name_;
  ::google::protobuf::uint32 type_;
  bool online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_player_5fdefine_2eproto();
  friend void protobuf_AssignDesc_player_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_player_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PlayerRelation* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInvite : public ::google::protobuf::Message {
 public:
  PlayerInvite();
  virtual ~PlayerInvite();

  PlayerInvite(const PlayerInvite& from);

  inline PlayerInvite& operator=(const PlayerInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInvite& default_instance();

  void Swap(PlayerInvite* other);

  // implements Message ----------------------------------------------

  PlayerInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInvite& from);
  void MergeFrom(const PlayerInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint32 guid() const;
  inline void set_guid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 group = 3;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 3;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:msgs2s.PlayerInvite)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 guid_;
  ::google::protobuf::uint32 group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_player_5fdefine_2eproto();
  friend void protobuf_AssignDesc_player_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_player_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PlayerInvite* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerSCData

// required uint32 guid = 1;
inline bool PlayerSCData::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSCData::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSCData::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSCData::clear_guid() {
  guid_ = 0u;
  clear_has_guid();
}
inline ::google::protobuf::uint32 PlayerSCData::guid() const {
  return guid_;
}
inline void PlayerSCData::set_guid(::google::protobuf::uint32 value) {
  set_has_guid();
  guid_ = value;
}

// required string name = 2;
inline bool PlayerSCData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerSCData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerSCData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerSCData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerSCData::name() const {
  return *name_;
}
inline void PlayerSCData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerSCData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerSCData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerSCData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerSCData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerSCData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 type = 3;
inline bool PlayerSCData::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerSCData::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerSCData::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerSCData::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PlayerSCData::type() const {
  return type_;
}
inline void PlayerSCData::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 sex = 4;
inline bool PlayerSCData::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerSCData::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerSCData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerSCData::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 PlayerSCData::sex() const {
  return sex_;
}
inline void PlayerSCData::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// required uint32 mapid = 5;
inline bool PlayerSCData::has_mapid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerSCData::set_has_mapid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerSCData::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerSCData::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 PlayerSCData::mapid() const {
  return mapid_;
}
inline void PlayerSCData::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// required float posx = 6;
inline bool PlayerSCData::has_posx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerSCData::set_has_posx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerSCData::clear_has_posx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerSCData::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline float PlayerSCData::posx() const {
  return posx_;
}
inline void PlayerSCData::set_posx(float value) {
  set_has_posx();
  posx_ = value;
}

// required float posy = 7;
inline bool PlayerSCData::has_posy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerSCData::set_has_posy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerSCData::clear_has_posy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerSCData::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline float PlayerSCData::posy() const {
  return posy_;
}
inline void PlayerSCData::set_posy(float value) {
  set_has_posy();
  posy_ = value;
}

// required float dir = 8;
inline bool PlayerSCData::has_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerSCData::set_has_dir() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerSCData::clear_has_dir() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerSCData::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline float PlayerSCData::dir() const {
  return dir_;
}
inline void PlayerSCData::set_dir(float value) {
  set_has_dir();
  dir_ = value;
}

// required uint32 city = 9;
inline bool PlayerSCData::has_city() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerSCData::set_has_city() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerSCData::clear_has_city() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerSCData::clear_city() {
  city_ = 0u;
  clear_has_city();
}
inline ::google::protobuf::uint32 PlayerSCData::city() const {
  return city_;
}
inline void PlayerSCData::set_city(::google::protobuf::uint32 value) {
  set_has_city();
  city_ = value;
}

// required uint32 head = 10;
inline bool PlayerSCData::has_head() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerSCData::set_has_head() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerSCData::clear_has_head() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerSCData::clear_head() {
  head_ = 0u;
  clear_has_head();
}
inline ::google::protobuf::uint32 PlayerSCData::head() const {
  return head_;
}
inline void PlayerSCData::set_head(::google::protobuf::uint32 value) {
  set_has_head();
  head_ = value;
}

// -------------------------------------------------------------------

// PlayerSSData

// required uint32 account = 1;
inline bool PlayerSSData::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSSData::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSSData::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSSData::clear_account() {
  account_ = 0u;
  clear_has_account();
}
inline ::google::protobuf::uint32 PlayerSSData::account() const {
  return account_;
}
inline void PlayerSSData::set_account(::google::protobuf::uint32 value) {
  set_has_account();
  account_ = value;
}

// required uint32 flag = 2;
inline bool PlayerSSData::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerSSData::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerSSData::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerSSData::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 PlayerSSData::flag() const {
  return flag_;
}
inline void PlayerSSData::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// required uint32 createtime = 3;
inline bool PlayerSSData::has_createtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerSSData::set_has_createtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerSSData::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerSSData::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 PlayerSSData::createtime() const {
  return createtime_;
}
inline void PlayerSSData::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// -------------------------------------------------------------------

// PlayerInfo

// required .msgs2s.PlayerSCData sc_data = 1;
inline bool PlayerInfo::has_sc_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfo::set_has_sc_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfo::clear_has_sc_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfo::clear_sc_data() {
  if (sc_data_ != NULL) sc_data_->::msgs2s::PlayerSCData::Clear();
  clear_has_sc_data();
}
inline const ::msgs2s::PlayerSCData& PlayerInfo::sc_data() const {
  return sc_data_ != NULL ? *sc_data_ : *default_instance_->sc_data_;
}
inline ::msgs2s::PlayerSCData* PlayerInfo::mutable_sc_data() {
  set_has_sc_data();
  if (sc_data_ == NULL) sc_data_ = new ::msgs2s::PlayerSCData;
  return sc_data_;
}
inline ::msgs2s::PlayerSCData* PlayerInfo::release_sc_data() {
  clear_has_sc_data();
  ::msgs2s::PlayerSCData* temp = sc_data_;
  sc_data_ = NULL;
  return temp;
}
inline void PlayerInfo::set_allocated_sc_data(::msgs2s::PlayerSCData* sc_data) {
  delete sc_data_;
  sc_data_ = sc_data;
  if (sc_data) {
    set_has_sc_data();
  } else {
    clear_has_sc_data();
  }
}

// required .msgs2s.PlayerSSData ss_data = 2;
inline bool PlayerInfo::has_ss_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfo::set_has_ss_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfo::clear_has_ss_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfo::clear_ss_data() {
  if (ss_data_ != NULL) ss_data_->::msgs2s::PlayerSSData::Clear();
  clear_has_ss_data();
}
inline const ::msgs2s::PlayerSSData& PlayerInfo::ss_data() const {
  return ss_data_ != NULL ? *ss_data_ : *default_instance_->ss_data_;
}
inline ::msgs2s::PlayerSSData* PlayerInfo::mutable_ss_data() {
  set_has_ss_data();
  if (ss_data_ == NULL) ss_data_ = new ::msgs2s::PlayerSSData;
  return ss_data_;
}
inline ::msgs2s::PlayerSSData* PlayerInfo::release_ss_data() {
  clear_has_ss_data();
  ::msgs2s::PlayerSSData* temp = ss_data_;
  ss_data_ = NULL;
  return temp;
}
inline void PlayerInfo::set_allocated_ss_data(::msgs2s::PlayerSSData* ss_data) {
  delete ss_data_;
  ss_data_ = ss_data;
  if (ss_data) {
    set_has_ss_data();
  } else {
    clear_has_ss_data();
  }
}

// -------------------------------------------------------------------

// PlayerMail

// required uint32 mailid = 1;
inline bool PlayerMail::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMail::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMail::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMail::clear_mailid() {
  mailid_ = 0u;
  clear_has_mailid();
}
inline ::google::protobuf::uint32 PlayerMail::mailid() const {
  return mailid_;
}
inline void PlayerMail::set_mailid(::google::protobuf::uint32 value) {
  set_has_mailid();
  mailid_ = value;
}

// required uint32 sender = 2;
inline bool PlayerMail::has_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerMail::set_has_sender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerMail::clear_has_sender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerMail::clear_sender() {
  sender_ = 0u;
  clear_has_sender();
}
inline ::google::protobuf::uint32 PlayerMail::sender() const {
  return sender_;
}
inline void PlayerMail::set_sender(::google::protobuf::uint32 value) {
  set_has_sender();
  sender_ = value;
}

// required string senderName = 3;
inline bool PlayerMail::has_sendername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerMail::set_has_sendername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerMail::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerMail::clear_sendername() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    sendername_->clear();
  }
  clear_has_sendername();
}
inline const ::std::string& PlayerMail::sendername() const {
  return *sendername_;
}
inline void PlayerMail::set_sendername(const ::std::string& value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void PlayerMail::set_sendername(const char* value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
}
inline void PlayerMail::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMail::mutable_sendername() {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    sendername_ = new ::std::string;
  }
  return sendername_;
}
inline ::std::string* PlayerMail::release_sendername() {
  clear_has_sendername();
  if (sendername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendername_;
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMail::set_allocated_sendername(::std::string* sendername) {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (sendername) {
    set_has_sendername();
    sendername_ = sendername;
  } else {
    clear_has_sendername();
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 reciver = 4;
inline bool PlayerMail::has_reciver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerMail::set_has_reciver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerMail::clear_has_reciver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerMail::clear_reciver() {
  reciver_ = 0u;
  clear_has_reciver();
}
inline ::google::protobuf::uint32 PlayerMail::reciver() const {
  return reciver_;
}
inline void PlayerMail::set_reciver(::google::protobuf::uint32 value) {
  set_has_reciver();
  reciver_ = value;
}

// required uint32 mailtype = 5;
inline bool PlayerMail::has_mailtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerMail::set_has_mailtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerMail::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerMail::clear_mailtype() {
  mailtype_ = 0u;
  clear_has_mailtype();
}
inline ::google::protobuf::uint32 PlayerMail::mailtype() const {
  return mailtype_;
}
inline void PlayerMail::set_mailtype(::google::protobuf::uint32 value) {
  set_has_mailtype();
  mailtype_ = value;
}

// required string content = 6;
inline bool PlayerMail::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerMail::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerMail::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerMail::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& PlayerMail::content() const {
  return *content_;
}
inline void PlayerMail::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PlayerMail::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PlayerMail::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerMail::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* PlayerMail::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerMail::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 flag = 7;
inline bool PlayerMail::has_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerMail::set_has_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerMail::clear_has_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerMail::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 PlayerMail::flag() const {
  return flag_;
}
inline void PlayerMail::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// required uint32 createtime = 8;
inline bool PlayerMail::has_createtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerMail::set_has_createtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerMail::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerMail::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 PlayerMail::createtime() const {
  return createtime_;
}
inline void PlayerMail::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// -------------------------------------------------------------------

// PlayerRelation

// required uint32 guid = 1;
inline bool PlayerRelation::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerRelation::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerRelation::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerRelation::clear_guid() {
  guid_ = 0u;
  clear_has_guid();
}
inline ::google::protobuf::uint32 PlayerRelation::guid() const {
  return guid_;
}
inline void PlayerRelation::set_guid(::google::protobuf::uint32 value) {
  set_has_guid();
  guid_ = value;
}

// required uint32 relation = 2;
inline bool PlayerRelation::has_relation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerRelation::set_has_relation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerRelation::clear_has_relation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerRelation::clear_relation() {
  relation_ = 0u;
  clear_has_relation();
}
inline ::google::protobuf::uint32 PlayerRelation::relation() const {
  return relation_;
}
inline void PlayerRelation::set_relation(::google::protobuf::uint32 value) {
  set_has_relation();
  relation_ = value;
}

// optional string mark = 3;
inline bool PlayerRelation::has_mark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerRelation::set_has_mark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerRelation::clear_has_mark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerRelation::clear_mark() {
  if (mark_ != &::google::protobuf::internal::kEmptyString) {
    mark_->clear();
  }
  clear_has_mark();
}
inline const ::std::string& PlayerRelation::mark() const {
  return *mark_;
}
inline void PlayerRelation::set_mark(const ::std::string& value) {
  set_has_mark();
  if (mark_ == &::google::protobuf::internal::kEmptyString) {
    mark_ = new ::std::string;
  }
  mark_->assign(value);
}
inline void PlayerRelation::set_mark(const char* value) {
  set_has_mark();
  if (mark_ == &::google::protobuf::internal::kEmptyString) {
    mark_ = new ::std::string;
  }
  mark_->assign(value);
}
inline void PlayerRelation::set_mark(const char* value, size_t size) {
  set_has_mark();
  if (mark_ == &::google::protobuf::internal::kEmptyString) {
    mark_ = new ::std::string;
  }
  mark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerRelation::mutable_mark() {
  set_has_mark();
  if (mark_ == &::google::protobuf::internal::kEmptyString) {
    mark_ = new ::std::string;
  }
  return mark_;
}
inline ::std::string* PlayerRelation::release_mark() {
  clear_has_mark();
  if (mark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mark_;
    mark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerRelation::set_allocated_mark(::std::string* mark) {
  if (mark_ != &::google::protobuf::internal::kEmptyString) {
    delete mark_;
  }
  if (mark) {
    set_has_mark();
    mark_ = mark;
  } else {
    clear_has_mark();
    mark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 group = 4;
inline bool PlayerRelation::has_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerRelation::set_has_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerRelation::clear_has_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerRelation::clear_group() {
  group_ = 0u;
  clear_has_group();
}
inline ::google::protobuf::uint32 PlayerRelation::group() const {
  return group_;
}
inline void PlayerRelation::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
}

// required uint32 sex = 5;
inline bool PlayerRelation::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerRelation::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerRelation::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerRelation::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 PlayerRelation::sex() const {
  return sex_;
}
inline void PlayerRelation::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// required string name = 6;
inline bool PlayerRelation::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerRelation::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerRelation::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerRelation::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerRelation::name() const {
  return *name_;
}
inline void PlayerRelation::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerRelation::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerRelation::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerRelation::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerRelation::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerRelation::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 type = 7;
inline bool PlayerRelation::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerRelation::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerRelation::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerRelation::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PlayerRelation::type() const {
  return type_;
}
inline void PlayerRelation::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required bool online = 8;
inline bool PlayerRelation::has_online() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerRelation::set_has_online() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerRelation::clear_has_online() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerRelation::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool PlayerRelation::online() const {
  return online_;
}
inline void PlayerRelation::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// PlayerInvite

// required uint32 guid = 1;
inline bool PlayerInvite::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInvite::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInvite::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInvite::clear_guid() {
  guid_ = 0u;
  clear_has_guid();
}
inline ::google::protobuf::uint32 PlayerInvite::guid() const {
  return guid_;
}
inline void PlayerInvite::set_guid(::google::protobuf::uint32 value) {
  set_has_guid();
  guid_ = value;
}

// required string name = 2;
inline bool PlayerInvite::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInvite::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInvite::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInvite::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerInvite::name() const {
  return *name_;
}
inline void PlayerInvite::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerInvite::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerInvite::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInvite::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerInvite::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerInvite::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 group = 3;
inline bool PlayerInvite::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInvite::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInvite::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInvite::clear_group() {
  group_ = 0u;
  clear_has_group();
}
inline ::google::protobuf::uint32 PlayerInvite::group() const {
  return group_;
}
inline void PlayerInvite::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs2s

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_5fdefine_2eproto__INCLUDED
