// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_game_db.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_game_db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msgs2s {

namespace {

const ::google::protobuf::Descriptor* MsgGS2DBQueryChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGS2DBQueryChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDB2GSQueryCharResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDB2GSQueryCharResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGS2DBSavePlaye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGS2DBSavePlaye_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGS2DBChangeServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGS2DBChangeServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LineState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fgame_5fdb_2eproto() {
  protobuf_AddDesc_msg_5fgame_5fdb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_game_db.proto");
  GOOGLE_CHECK(file != NULL);
  MsgGS2DBQueryChar_descriptor_ = file->message_type(0);
  static const int MsgGS2DBQueryChar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGS2DBQueryChar, data_),
  };
  MsgGS2DBQueryChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGS2DBQueryChar_descriptor_,
      MsgGS2DBQueryChar::default_instance_,
      MsgGS2DBQueryChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGS2DBQueryChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGS2DBQueryChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGS2DBQueryChar));
  MsgDB2GSQueryCharResult_descriptor_ = file->message_type(1);
  static const int MsgDB2GSQueryCharResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDB2GSQueryCharResult, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDB2GSQueryCharResult, result_),
  };
  MsgDB2GSQueryCharResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDB2GSQueryCharResult_descriptor_,
      MsgDB2GSQueryCharResult::default_instance_,
      MsgDB2GSQueryCharResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDB2GSQueryCharResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDB2GSQueryCharResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDB2GSQueryCharResult));
  DBPlayerData_descriptor_ = file->message_type(2);
  static const int DBPlayerData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerData, state_),
  };
  DBPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBPlayerData_descriptor_,
      DBPlayerData::default_instance_,
      DBPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBPlayerData));
  MsgGS2DBSavePlaye_descriptor_ = file->message_type(3);
  static const int MsgGS2DBSavePlaye_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGS2DBSavePlaye, players_),
  };
  MsgGS2DBSavePlaye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGS2DBSavePlaye_descriptor_,
      MsgGS2DBSavePlaye::default_instance_,
      MsgGS2DBSavePlaye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGS2DBSavePlaye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGS2DBSavePlaye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGS2DBSavePlaye));
  MsgGS2DBChangeServer_descriptor_ = file->message_type(4);
  static const int MsgGS2DBChangeServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGS2DBChangeServer, city_),
  };
  MsgGS2DBChangeServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGS2DBChangeServer_descriptor_,
      MsgGS2DBChangeServer::default_instance_,
      MsgGS2DBChangeServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGS2DBChangeServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGS2DBChangeServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGS2DBChangeServer));
  LineState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fgame_5fdb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGS2DBQueryChar_descriptor_, &MsgGS2DBQueryChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDB2GSQueryCharResult_descriptor_, &MsgDB2GSQueryCharResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBPlayerData_descriptor_, &DBPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGS2DBSavePlaye_descriptor_, &MsgGS2DBSavePlaye::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGS2DBChangeServer_descriptor_, &MsgGS2DBChangeServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fgame_5fdb_2eproto() {
  delete MsgGS2DBQueryChar::default_instance_;
  delete MsgGS2DBQueryChar_reflection_;
  delete MsgDB2GSQueryCharResult::default_instance_;
  delete MsgDB2GSQueryCharResult_reflection_;
  delete DBPlayerData::default_instance_;
  delete DBPlayerData_reflection_;
  delete MsgGS2DBSavePlaye::default_instance_;
  delete MsgGS2DBSavePlaye_reflection_;
  delete MsgGS2DBChangeServer::default_instance_;
  delete MsgGS2DBChangeServer_reflection_;
}

void protobuf_AddDesc_msg_5fgame_5fdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::msgs2s::protobuf_AddDesc_msg_5fgate_5flogin_2eproto();
  ::msgs2s::protobuf_AddDesc_player_5fdefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021msg_game_db.proto\022\006msgs2s\032\024msg_gate_lo"
    "gin.proto\032\023player_define.proto\"3\n\021MsgGS2"
    "DBQueryChar\022\036\n\004data\030\001 \002(\0132\020.msgs2s.GTLGD"
    "ata\"K\n\027MsgDB2GSQueryCharResult\022 \n\004info\030\001"
    " \001(\0132\022.msgs2s.PlayerInfo\022\016\n\006result\030\002 \002(\r"
    "\"R\n\014DBPlayerData\022 \n\004data\030\001 \002(\0132\022.msgs2s."
    "PlayerInfo\022 \n\005state\030\002 \002(\0162\021.msgs2s.LineS"
    "tate\":\n\021MsgGS2DBSavePlaye\022%\n\007players\030\001 \003"
    "(\0132\024.msgs2s.DBPlayerData\"$\n\024MsgGS2DBChan"
    "geServer\022\014\n\004city\030\001 \002(\r*)\n\tLineState\022\r\n\t_"
    "ON_LINE_\020\001\022\r\n\t_OFF_LINE\020\002", 425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_game_db.proto", &protobuf_RegisterTypes);
  MsgGS2DBQueryChar::default_instance_ = new MsgGS2DBQueryChar();
  MsgDB2GSQueryCharResult::default_instance_ = new MsgDB2GSQueryCharResult();
  DBPlayerData::default_instance_ = new DBPlayerData();
  MsgGS2DBSavePlaye::default_instance_ = new MsgGS2DBSavePlaye();
  MsgGS2DBChangeServer::default_instance_ = new MsgGS2DBChangeServer();
  MsgGS2DBQueryChar::default_instance_->InitAsDefaultInstance();
  MsgDB2GSQueryCharResult::default_instance_->InitAsDefaultInstance();
  DBPlayerData::default_instance_->InitAsDefaultInstance();
  MsgGS2DBSavePlaye::default_instance_->InitAsDefaultInstance();
  MsgGS2DBChangeServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fgame_5fdb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fgame_5fdb_2eproto {
  StaticDescriptorInitializer_msg_5fgame_5fdb_2eproto() {
    protobuf_AddDesc_msg_5fgame_5fdb_2eproto();
  }
} static_descriptor_initializer_msg_5fgame_5fdb_2eproto_;
const ::google::protobuf::EnumDescriptor* LineState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineState_descriptor_;
}
bool LineState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGS2DBQueryChar::kDataFieldNumber;
#endif  // !_MSC_VER

MsgGS2DBQueryChar::MsgGS2DBQueryChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGS2DBQueryChar::InitAsDefaultInstance() {
  data_ = const_cast< ::msgs2s::GTLGData*>(&::msgs2s::GTLGData::default_instance());
}

MsgGS2DBQueryChar::MsgGS2DBQueryChar(const MsgGS2DBQueryChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGS2DBQueryChar::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGS2DBQueryChar::~MsgGS2DBQueryChar() {
  SharedDtor();
}

void MsgGS2DBQueryChar::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void MsgGS2DBQueryChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGS2DBQueryChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGS2DBQueryChar_descriptor_;
}

const MsgGS2DBQueryChar& MsgGS2DBQueryChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_5fdb_2eproto();
  return *default_instance_;
}

MsgGS2DBQueryChar* MsgGS2DBQueryChar::default_instance_ = NULL;

MsgGS2DBQueryChar* MsgGS2DBQueryChar::New() const {
  return new MsgGS2DBQueryChar;
}

void MsgGS2DBQueryChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::msgs2s::GTLGData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGS2DBQueryChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msgs2s.GTLGData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGS2DBQueryChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .msgs2s.GTLGData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGS2DBQueryChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .msgs2s.GTLGData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGS2DBQueryChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .msgs2s.GTLGData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGS2DBQueryChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGS2DBQueryChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGS2DBQueryChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGS2DBQueryChar::MergeFrom(const MsgGS2DBQueryChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::msgs2s::GTLGData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGS2DBQueryChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGS2DBQueryChar::CopyFrom(const MsgGS2DBQueryChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGS2DBQueryChar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void MsgGS2DBQueryChar::Swap(MsgGS2DBQueryChar* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGS2DBQueryChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGS2DBQueryChar_descriptor_;
  metadata.reflection = MsgGS2DBQueryChar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDB2GSQueryCharResult::kInfoFieldNumber;
const int MsgDB2GSQueryCharResult::kResultFieldNumber;
#endif  // !_MSC_VER

MsgDB2GSQueryCharResult::MsgDB2GSQueryCharResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgDB2GSQueryCharResult::InitAsDefaultInstance() {
  info_ = const_cast< ::msgs2s::PlayerInfo*>(&::msgs2s::PlayerInfo::default_instance());
}

MsgDB2GSQueryCharResult::MsgDB2GSQueryCharResult(const MsgDB2GSQueryCharResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgDB2GSQueryCharResult::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDB2GSQueryCharResult::~MsgDB2GSQueryCharResult() {
  SharedDtor();
}

void MsgDB2GSQueryCharResult::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MsgDB2GSQueryCharResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDB2GSQueryCharResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDB2GSQueryCharResult_descriptor_;
}

const MsgDB2GSQueryCharResult& MsgDB2GSQueryCharResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_5fdb_2eproto();
  return *default_instance_;
}

MsgDB2GSQueryCharResult* MsgDB2GSQueryCharResult::default_instance_ = NULL;

MsgDB2GSQueryCharResult* MsgDB2GSQueryCharResult::New() const {
  return new MsgDB2GSQueryCharResult;
}

void MsgDB2GSQueryCharResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::msgs2s::PlayerInfo::Clear();
    }
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDB2GSQueryCharResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msgs2s.PlayerInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDB2GSQueryCharResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .msgs2s.PlayerInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDB2GSQueryCharResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .msgs2s.PlayerInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDB2GSQueryCharResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .msgs2s.PlayerInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDB2GSQueryCharResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDB2GSQueryCharResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDB2GSQueryCharResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDB2GSQueryCharResult::MergeFrom(const MsgDB2GSQueryCharResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::msgs2s::PlayerInfo::MergeFrom(from.info());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDB2GSQueryCharResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDB2GSQueryCharResult::CopyFrom(const MsgDB2GSQueryCharResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDB2GSQueryCharResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void MsgDB2GSQueryCharResult::Swap(MsgDB2GSQueryCharResult* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDB2GSQueryCharResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDB2GSQueryCharResult_descriptor_;
  metadata.reflection = MsgDB2GSQueryCharResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBPlayerData::kDataFieldNumber;
const int DBPlayerData::kStateFieldNumber;
#endif  // !_MSC_VER

DBPlayerData::DBPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBPlayerData::InitAsDefaultInstance() {
  data_ = const_cast< ::msgs2s::PlayerInfo*>(&::msgs2s::PlayerInfo::default_instance());
}

DBPlayerData::DBPlayerData(const DBPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBPlayerData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBPlayerData::~DBPlayerData() {
  SharedDtor();
}

void DBPlayerData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DBPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBPlayerData_descriptor_;
}

const DBPlayerData& DBPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_5fdb_2eproto();
  return *default_instance_;
}

DBPlayerData* DBPlayerData::default_instance_ = NULL;

DBPlayerData* DBPlayerData::New() const {
  return new DBPlayerData;
}

void DBPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::msgs2s::PlayerInfo::Clear();
    }
    state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msgs2s.PlayerInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .msgs2s.LineState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msgs2s::LineState_IsValid(value)) {
            set_state(static_cast< ::msgs2s::LineState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .msgs2s.PlayerInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // required .msgs2s.LineState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .msgs2s.PlayerInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // required .msgs2s.LineState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBPlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .msgs2s.PlayerInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // required .msgs2s.LineState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBPlayerData::MergeFrom(const DBPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::msgs2s::PlayerInfo::MergeFrom(from.data());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBPlayerData::CopyFrom(const DBPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void DBPlayerData::Swap(DBPlayerData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBPlayerData_descriptor_;
  metadata.reflection = DBPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGS2DBSavePlaye::kPlayersFieldNumber;
#endif  // !_MSC_VER

MsgGS2DBSavePlaye::MsgGS2DBSavePlaye()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGS2DBSavePlaye::InitAsDefaultInstance() {
}

MsgGS2DBSavePlaye::MsgGS2DBSavePlaye(const MsgGS2DBSavePlaye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGS2DBSavePlaye::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGS2DBSavePlaye::~MsgGS2DBSavePlaye() {
  SharedDtor();
}

void MsgGS2DBSavePlaye::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGS2DBSavePlaye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGS2DBSavePlaye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGS2DBSavePlaye_descriptor_;
}

const MsgGS2DBSavePlaye& MsgGS2DBSavePlaye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_5fdb_2eproto();
  return *default_instance_;
}

MsgGS2DBSavePlaye* MsgGS2DBSavePlaye::default_instance_ = NULL;

MsgGS2DBSavePlaye* MsgGS2DBSavePlaye::New() const {
  return new MsgGS2DBSavePlaye;
}

void MsgGS2DBSavePlaye::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGS2DBSavePlaye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msgs2s.DBPlayerData players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGS2DBSavePlaye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .msgs2s.DBPlayerData players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGS2DBSavePlaye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .msgs2s.DBPlayerData players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGS2DBSavePlaye::ByteSize() const {
  int total_size = 0;

  // repeated .msgs2s.DBPlayerData players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGS2DBSavePlaye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGS2DBSavePlaye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGS2DBSavePlaye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGS2DBSavePlaye::MergeFrom(const MsgGS2DBSavePlaye& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGS2DBSavePlaye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGS2DBSavePlaye::CopyFrom(const MsgGS2DBSavePlaye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGS2DBSavePlaye::IsInitialized() const {

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void MsgGS2DBSavePlaye::Swap(MsgGS2DBSavePlaye* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGS2DBSavePlaye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGS2DBSavePlaye_descriptor_;
  metadata.reflection = MsgGS2DBSavePlaye_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGS2DBChangeServer::kCityFieldNumber;
#endif  // !_MSC_VER

MsgGS2DBChangeServer::MsgGS2DBChangeServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGS2DBChangeServer::InitAsDefaultInstance() {
}

MsgGS2DBChangeServer::MsgGS2DBChangeServer(const MsgGS2DBChangeServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGS2DBChangeServer::SharedCtor() {
  _cached_size_ = 0;
  city_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGS2DBChangeServer::~MsgGS2DBChangeServer() {
  SharedDtor();
}

void MsgGS2DBChangeServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGS2DBChangeServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGS2DBChangeServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGS2DBChangeServer_descriptor_;
}

const MsgGS2DBChangeServer& MsgGS2DBChangeServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fgame_5fdb_2eproto();
  return *default_instance_;
}

MsgGS2DBChangeServer* MsgGS2DBChangeServer::default_instance_ = NULL;

MsgGS2DBChangeServer* MsgGS2DBChangeServer::New() const {
  return new MsgGS2DBChangeServer;
}

void MsgGS2DBChangeServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGS2DBChangeServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_)));
          set_has_city();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGS2DBChangeServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city = 1;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGS2DBChangeServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city = 1;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGS2DBChangeServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city = 1;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGS2DBChangeServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGS2DBChangeServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGS2DBChangeServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGS2DBChangeServer::MergeFrom(const MsgGS2DBChangeServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGS2DBChangeServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGS2DBChangeServer::CopyFrom(const MsgGS2DBChangeServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGS2DBChangeServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgGS2DBChangeServer::Swap(MsgGS2DBChangeServer* other) {
  if (other != this) {
    std::swap(city_, other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGS2DBChangeServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGS2DBChangeServer_descriptor_;
  metadata.reflection = MsgGS2DBChangeServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs2s

// @@protoc_insertion_point(global_scope)
