// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace clientmsg {

namespace {

const ::google::protobuf::Descriptor* PlayerLeaveScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLeaveScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapScreenRefreshCharacter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapScreenRefreshCharacter_reflection_ = NULL;
const ::google::protobuf::Descriptor* NineScreenRefreshPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NineScreenRefreshPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerJoinRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerJoinRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharMoveFailed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharMoveFailed_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapRemoveChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapRemoveChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharChangeScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharChangeScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseChangeScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseChangeScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharGoTo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharGoTo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enumChangeSceneResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2eproto() {
  protobuf_AddDesc_map_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerLeaveScene_descriptor_ = file->message_type(0);
  static const int PlayerLeaveScene_offsets_[1] = {
  };
  PlayerLeaveScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLeaveScene_descriptor_,
      PlayerLeaveScene::default_instance_,
      PlayerLeaveScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLeaveScene));
  MapScreenRefreshCharacter_descriptor_ = file->message_type(1);
  static const int MapScreenRefreshCharacter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapScreenRefreshCharacter, mapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapScreenRefreshCharacter, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapScreenRefreshCharacter, cityid_),
  };
  MapScreenRefreshCharacter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapScreenRefreshCharacter_descriptor_,
      MapScreenRefreshCharacter::default_instance_,
      MapScreenRefreshCharacter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapScreenRefreshCharacter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapScreenRefreshCharacter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapScreenRefreshCharacter));
  NineScreenRefreshPlayer_descriptor_ = file->message_type(2);
  static const int NineScreenRefreshPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NineScreenRefreshPlayer, users_),
  };
  NineScreenRefreshPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NineScreenRefreshPlayer_descriptor_,
      NineScreenRefreshPlayer::default_instance_,
      NineScreenRefreshPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NineScreenRefreshPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NineScreenRefreshPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NineScreenRefreshPlayer));
  PlayerJoinRange_descriptor_ = file->message_type(3);
  static const int PlayerJoinRange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerJoinRange, _joinuser_),
  };
  PlayerJoinRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerJoinRange_descriptor_,
      PlayerJoinRange::default_instance_,
      PlayerJoinRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerJoinRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerJoinRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerJoinRange));
  CharMove_descriptor_ = file->message_type(4);
  static const int CharMove_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMove, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMove, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMove, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMove, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMove, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMove, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMove, state_),
  };
  CharMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharMove_descriptor_,
      CharMove::default_instance_,
      CharMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharMove));
  CharMoveFailed_descriptor_ = file->message_type(5);
  static const int CharMoveFailed_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMoveFailed, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMoveFailed, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMoveFailed, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMoveFailed, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMoveFailed, timestamp_),
  };
  CharMoveFailed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharMoveFailed_descriptor_,
      CharMoveFailed::default_instance_,
      CharMoveFailed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMoveFailed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharMoveFailed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharMoveFailed));
  MapRemoveChar_descriptor_ = file->message_type(6);
  static const int MapRemoveChar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRemoveChar, users_),
  };
  MapRemoveChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapRemoveChar_descriptor_,
      MapRemoveChar::default_instance_,
      MapRemoveChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRemoveChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapRemoveChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapRemoveChar));
  CharChangeScene_descriptor_ = file->message_type(7);
  static const int CharChangeScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharChangeScene, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharChangeScene, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharChangeScene, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharChangeScene, y_),
  };
  CharChangeScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharChangeScene_descriptor_,
      CharChangeScene::default_instance_,
      CharChangeScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharChangeScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharChangeScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharChangeScene));
  ResponseChangeScene_descriptor_ = file->message_type(8);
  static const int ResponseChangeScene_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChangeScene, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChangeScene, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChangeScene, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChangeScene, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChangeScene, result_),
  };
  ResponseChangeScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseChangeScene_descriptor_,
      ResponseChangeScene::default_instance_,
      ResponseChangeScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChangeScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChangeScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseChangeScene));
  CharGoTo_descriptor_ = file->message_type(9);
  static const int CharGoTo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharGoTo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharGoTo, y_),
  };
  CharGoTo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharGoTo_descriptor_,
      CharGoTo::default_instance_,
      CharGoTo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharGoTo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharGoTo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharGoTo));
  enumChangeSceneResult_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLeaveScene_descriptor_, &PlayerLeaveScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapScreenRefreshCharacter_descriptor_, &MapScreenRefreshCharacter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NineScreenRefreshPlayer_descriptor_, &NineScreenRefreshPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerJoinRange_descriptor_, &PlayerJoinRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharMove_descriptor_, &CharMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharMoveFailed_descriptor_, &CharMoveFailed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapRemoveChar_descriptor_, &MapRemoveChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharChangeScene_descriptor_, &CharChangeScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseChangeScene_descriptor_, &ResponseChangeScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharGoTo_descriptor_, &CharGoTo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2eproto() {
  delete PlayerLeaveScene::default_instance_;
  delete PlayerLeaveScene_reflection_;
  delete MapScreenRefreshCharacter::default_instance_;
  delete MapScreenRefreshCharacter_reflection_;
  delete NineScreenRefreshPlayer::default_instance_;
  delete NineScreenRefreshPlayer_reflection_;
  delete PlayerJoinRange::default_instance_;
  delete PlayerJoinRange_reflection_;
  delete CharMove::default_instance_;
  delete CharMove_reflection_;
  delete CharMoveFailed::default_instance_;
  delete CharMoveFailed_reflection_;
  delete MapRemoveChar::default_instance_;
  delete MapRemoveChar_reflection_;
  delete CharChangeScene::default_instance_;
  delete CharChangeScene_reflection_;
  delete ResponseChangeScene::default_instance_;
  delete ResponseChangeScene_reflection_;
  delete CharGoTo::default_instance_;
  delete CharGoTo_reflection_;
}

void protobuf_AddDesc_map_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmap.proto\022\tclientmsg\032\014common.proto\"\022\n\020"
    "PlayerLeaveScene\"Y\n\031MapScreenRefreshChar"
    "acter\022\035\n\007mapinfo\030\001 \001(\0132\014.MapCharInfo\022\r\n\005"
    "mapid\030\002 \001(\r\022\016\n\006cityid\030\003 \001(\r\"6\n\027NineScree"
    "nRefreshPlayer\022\033\n\005users\030\001 \003(\0132\014.MapCharI"
    "nfo\"2\n\017PlayerJoinRange\022\037\n\t_joinUser\030\001 \001("
    "\0132\014.MapCharInfo\"n\n\010CharMove\022\016\n\006charid\030\001 "
    "\001(\r\022\013\n\003dir\030\002 \001(\002\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\r"
    "\n\005speed\030\005 \001(\002\022\021\n\ttimestamp\030\006 \001(\r\022\r\n\005stat"
    "e\030\007 \001(\r\"U\n\016CharMoveFailed\022\t\n\001x\030\001 \001(\r\022\t\n\001"
    "y\030\002 \001(\r\022\r\n\005speed\030\003 \001(\r\022\013\n\003dir\030\004 \001(\002\022\021\n\tt"
    "imestamp\030\005 \001(\r\"\036\n\rMapRemoveChar\022\r\n\005users"
    "\030\001 \003(\r\"F\n\017CharChangeScene\022\016\n\006cityid\030\001 \001("
    "\r\022\r\n\005mapid\030\002 \001(\r\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004 \001(\r\"|"
    "\n\023ResponseChangeScene\022\r\n\005mapid\030\001 \001(\r\022\016\n\006"
    "cityid\030\002 \001(\r\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004 \001(\r\0220\n\006re"
    "sult\030\005 \001(\0162 .clientmsg.enumChangeSceneRe"
    "sult\" \n\010CharGoTo\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r*^"
    "\n\025enumChangeSceneResult\022!\n\035enumChangeSce"
    "neResult_Success\020\001\022\"\n\036enumChangeSceneRes"
    "ult_NotScene\020\002", 814);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map.proto", &protobuf_RegisterTypes);
  PlayerLeaveScene::default_instance_ = new PlayerLeaveScene();
  MapScreenRefreshCharacter::default_instance_ = new MapScreenRefreshCharacter();
  NineScreenRefreshPlayer::default_instance_ = new NineScreenRefreshPlayer();
  PlayerJoinRange::default_instance_ = new PlayerJoinRange();
  CharMove::default_instance_ = new CharMove();
  CharMoveFailed::default_instance_ = new CharMoveFailed();
  MapRemoveChar::default_instance_ = new MapRemoveChar();
  CharChangeScene::default_instance_ = new CharChangeScene();
  ResponseChangeScene::default_instance_ = new ResponseChangeScene();
  CharGoTo::default_instance_ = new CharGoTo();
  PlayerLeaveScene::default_instance_->InitAsDefaultInstance();
  MapScreenRefreshCharacter::default_instance_->InitAsDefaultInstance();
  NineScreenRefreshPlayer::default_instance_->InitAsDefaultInstance();
  PlayerJoinRange::default_instance_->InitAsDefaultInstance();
  CharMove::default_instance_->InitAsDefaultInstance();
  CharMoveFailed::default_instance_->InitAsDefaultInstance();
  MapRemoveChar::default_instance_->InitAsDefaultInstance();
  CharChangeScene::default_instance_->InitAsDefaultInstance();
  ResponseChangeScene::default_instance_->InitAsDefaultInstance();
  CharGoTo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2eproto {
  StaticDescriptorInitializer_map_2eproto() {
    protobuf_AddDesc_map_2eproto();
  }
} static_descriptor_initializer_map_2eproto_;
const ::google::protobuf::EnumDescriptor* enumChangeSceneResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enumChangeSceneResult_descriptor_;
}
bool enumChangeSceneResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerLeaveScene::PlayerLeaveScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLeaveScene::InitAsDefaultInstance() {
}

PlayerLeaveScene::PlayerLeaveScene(const PlayerLeaveScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLeaveScene::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLeaveScene::~PlayerLeaveScene() {
  SharedDtor();
}

void PlayerLeaveScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLeaveScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLeaveScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLeaveScene_descriptor_;
}

const PlayerLeaveScene& PlayerLeaveScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

PlayerLeaveScene* PlayerLeaveScene::default_instance_ = NULL;

PlayerLeaveScene* PlayerLeaveScene::New() const {
  return new PlayerLeaveScene;
}

void PlayerLeaveScene::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLeaveScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerLeaveScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLeaveScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLeaveScene::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLeaveScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLeaveScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLeaveScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLeaveScene::MergeFrom(const PlayerLeaveScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLeaveScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLeaveScene::CopyFrom(const PlayerLeaveScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLeaveScene::IsInitialized() const {

  return true;
}

void PlayerLeaveScene::Swap(PlayerLeaveScene* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLeaveScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLeaveScene_descriptor_;
  metadata.reflection = PlayerLeaveScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapScreenRefreshCharacter::kMapinfoFieldNumber;
const int MapScreenRefreshCharacter::kMapidFieldNumber;
const int MapScreenRefreshCharacter::kCityidFieldNumber;
#endif  // !_MSC_VER

MapScreenRefreshCharacter::MapScreenRefreshCharacter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapScreenRefreshCharacter::InitAsDefaultInstance() {
  mapinfo_ = const_cast< ::MapCharInfo*>(&::MapCharInfo::default_instance());
}

MapScreenRefreshCharacter::MapScreenRefreshCharacter(const MapScreenRefreshCharacter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapScreenRefreshCharacter::SharedCtor() {
  _cached_size_ = 0;
  mapinfo_ = NULL;
  mapid_ = 0u;
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapScreenRefreshCharacter::~MapScreenRefreshCharacter() {
  SharedDtor();
}

void MapScreenRefreshCharacter::SharedDtor() {
  if (this != default_instance_) {
    delete mapinfo_;
  }
}

void MapScreenRefreshCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapScreenRefreshCharacter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapScreenRefreshCharacter_descriptor_;
}

const MapScreenRefreshCharacter& MapScreenRefreshCharacter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapScreenRefreshCharacter* MapScreenRefreshCharacter::default_instance_ = NULL;

MapScreenRefreshCharacter* MapScreenRefreshCharacter::New() const {
  return new MapScreenRefreshCharacter;
}

void MapScreenRefreshCharacter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mapinfo()) {
      if (mapinfo_ != NULL) mapinfo_->::MapCharInfo::Clear();
    }
    mapid_ = 0u;
    cityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapScreenRefreshCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MapCharInfo mapinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cityid;
        break;
      }

      // optional uint32 cityid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapScreenRefreshCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MapCharInfo mapinfo = 1;
  if (has_mapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapinfo(), output);
  }

  // optional uint32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // optional uint32 cityid = 3;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapScreenRefreshCharacter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MapCharInfo mapinfo = 1;
  if (has_mapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapinfo(), target);
  }

  // optional uint32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // optional uint32 cityid = 3;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapScreenRefreshCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MapCharInfo mapinfo = 1;
    if (has_mapinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapinfo());
    }

    // optional uint32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 cityid = 3;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapScreenRefreshCharacter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapScreenRefreshCharacter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapScreenRefreshCharacter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapScreenRefreshCharacter::MergeFrom(const MapScreenRefreshCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapinfo()) {
      mutable_mapinfo()->::MapCharInfo::MergeFrom(from.mapinfo());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapScreenRefreshCharacter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapScreenRefreshCharacter::CopyFrom(const MapScreenRefreshCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapScreenRefreshCharacter::IsInitialized() const {

  return true;
}

void MapScreenRefreshCharacter::Swap(MapScreenRefreshCharacter* other) {
  if (other != this) {
    std::swap(mapinfo_, other->mapinfo_);
    std::swap(mapid_, other->mapid_);
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapScreenRefreshCharacter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapScreenRefreshCharacter_descriptor_;
  metadata.reflection = MapScreenRefreshCharacter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NineScreenRefreshPlayer::kUsersFieldNumber;
#endif  // !_MSC_VER

NineScreenRefreshPlayer::NineScreenRefreshPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NineScreenRefreshPlayer::InitAsDefaultInstance() {
}

NineScreenRefreshPlayer::NineScreenRefreshPlayer(const NineScreenRefreshPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NineScreenRefreshPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NineScreenRefreshPlayer::~NineScreenRefreshPlayer() {
  SharedDtor();
}

void NineScreenRefreshPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NineScreenRefreshPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NineScreenRefreshPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NineScreenRefreshPlayer_descriptor_;
}

const NineScreenRefreshPlayer& NineScreenRefreshPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

NineScreenRefreshPlayer* NineScreenRefreshPlayer::default_instance_ = NULL;

NineScreenRefreshPlayer* NineScreenRefreshPlayer::New() const {
  return new NineScreenRefreshPlayer;
}

void NineScreenRefreshPlayer::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NineScreenRefreshPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapCharInfo users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NineScreenRefreshPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MapCharInfo users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NineScreenRefreshPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MapCharInfo users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NineScreenRefreshPlayer::ByteSize() const {
  int total_size = 0;

  // repeated .MapCharInfo users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NineScreenRefreshPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NineScreenRefreshPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NineScreenRefreshPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NineScreenRefreshPlayer::MergeFrom(const NineScreenRefreshPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NineScreenRefreshPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NineScreenRefreshPlayer::CopyFrom(const NineScreenRefreshPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NineScreenRefreshPlayer::IsInitialized() const {

  return true;
}

void NineScreenRefreshPlayer::Swap(NineScreenRefreshPlayer* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NineScreenRefreshPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NineScreenRefreshPlayer_descriptor_;
  metadata.reflection = NineScreenRefreshPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerJoinRange::kJoinUserFieldNumber;
#endif  // !_MSC_VER

PlayerJoinRange::PlayerJoinRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerJoinRange::InitAsDefaultInstance() {
  _joinuser_ = const_cast< ::MapCharInfo*>(&::MapCharInfo::default_instance());
}

PlayerJoinRange::PlayerJoinRange(const PlayerJoinRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerJoinRange::SharedCtor() {
  _cached_size_ = 0;
  _joinuser_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerJoinRange::~PlayerJoinRange() {
  SharedDtor();
}

void PlayerJoinRange::SharedDtor() {
  if (this != default_instance_) {
    delete _joinuser_;
  }
}

void PlayerJoinRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerJoinRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerJoinRange_descriptor_;
}

const PlayerJoinRange& PlayerJoinRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

PlayerJoinRange* PlayerJoinRange::default_instance_ = NULL;

PlayerJoinRange* PlayerJoinRange::New() const {
  return new PlayerJoinRange;
}

void PlayerJoinRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__joinuser()) {
      if (_joinuser_ != NULL) _joinuser_->::MapCharInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerJoinRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MapCharInfo _joinUser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__joinuser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerJoinRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MapCharInfo _joinUser = 1;
  if (has__joinuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_joinuser(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerJoinRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MapCharInfo _joinUser = 1;
  if (has__joinuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_joinuser(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerJoinRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MapCharInfo _joinUser = 1;
    if (has__joinuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_joinuser());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerJoinRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerJoinRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerJoinRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerJoinRange::MergeFrom(const PlayerJoinRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__joinuser()) {
      mutable__joinuser()->::MapCharInfo::MergeFrom(from._joinuser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerJoinRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerJoinRange::CopyFrom(const PlayerJoinRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerJoinRange::IsInitialized() const {

  return true;
}

void PlayerJoinRange::Swap(PlayerJoinRange* other) {
  if (other != this) {
    std::swap(_joinuser_, other->_joinuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerJoinRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerJoinRange_descriptor_;
  metadata.reflection = PlayerJoinRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharMove::kCharidFieldNumber;
const int CharMove::kDirFieldNumber;
const int CharMove::kXFieldNumber;
const int CharMove::kYFieldNumber;
const int CharMove::kSpeedFieldNumber;
const int CharMove::kTimestampFieldNumber;
const int CharMove::kStateFieldNumber;
#endif  // !_MSC_VER

CharMove::CharMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharMove::InitAsDefaultInstance() {
}

CharMove::CharMove(const CharMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharMove::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  dir_ = 0;
  x_ = 0;
  y_ = 0;
  speed_ = 0;
  timestamp_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharMove::~CharMove() {
  SharedDtor();
}

void CharMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharMove_descriptor_;
}

const CharMove& CharMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

CharMove* CharMove::default_instance_ = NULL;

CharMove* CharMove::New() const {
  return new CharMove;
}

void CharMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    dir_ = 0;
    x_ = 0;
    y_ = 0;
    speed_ = 0;
    timestamp_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_dir;
        break;
      }

      // optional float dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }

      // optional float x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }

      // optional float y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_speed;
        break;
      }

      // optional float speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional uint32 state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional float dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dir(), output);
  }

  // optional float x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  // optional uint32 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timestamp(), output);
  }

  // optional uint32 state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional float dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dir(), target);
  }

  // optional float x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  // optional uint32 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timestamp(), target);
  }

  // optional uint32 state = 7;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional float dir = 2;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional float x = 3;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional uint32 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharMove::MergeFrom(const CharMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharMove::CopyFrom(const CharMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharMove::IsInitialized() const {

  return true;
}

void CharMove::Swap(CharMove* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dir_, other->dir_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(speed_, other->speed_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharMove_descriptor_;
  metadata.reflection = CharMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharMoveFailed::kXFieldNumber;
const int CharMoveFailed::kYFieldNumber;
const int CharMoveFailed::kSpeedFieldNumber;
const int CharMoveFailed::kDirFieldNumber;
const int CharMoveFailed::kTimestampFieldNumber;
#endif  // !_MSC_VER

CharMoveFailed::CharMoveFailed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharMoveFailed::InitAsDefaultInstance() {
}

CharMoveFailed::CharMoveFailed(const CharMoveFailed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharMoveFailed::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  speed_ = 0u;
  dir_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharMoveFailed::~CharMoveFailed() {
  SharedDtor();
}

void CharMoveFailed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharMoveFailed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharMoveFailed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharMoveFailed_descriptor_;
}

const CharMoveFailed& CharMoveFailed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

CharMoveFailed* CharMoveFailed::default_instance_ = NULL;

CharMoveFailed* CharMoveFailed::New() const {
  return new CharMoveFailed;
}

void CharMoveFailed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
    speed_ = 0u;
    dir_ = 0;
    timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharMoveFailed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_speed;
        break;
      }

      // optional uint32 speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dir;
        break;
      }

      // optional float dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharMoveFailed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional uint32 speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->speed(), output);
  }

  // optional float dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  // optional uint32 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharMoveFailed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional uint32 speed = 3;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->speed(), target);
  }

  // optional float dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  // optional uint32 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharMoveFailed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 speed = 3;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional float dir = 4;
    if (has_dir()) {
      total_size += 1 + 4;
    }

    // optional uint32 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharMoveFailed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharMoveFailed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharMoveFailed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharMoveFailed::MergeFrom(const CharMoveFailed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharMoveFailed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharMoveFailed::CopyFrom(const CharMoveFailed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharMoveFailed::IsInitialized() const {

  return true;
}

void CharMoveFailed::Swap(CharMoveFailed* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(speed_, other->speed_);
    std::swap(dir_, other->dir_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharMoveFailed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharMoveFailed_descriptor_;
  metadata.reflection = CharMoveFailed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapRemoveChar::kUsersFieldNumber;
#endif  // !_MSC_VER

MapRemoveChar::MapRemoveChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapRemoveChar::InitAsDefaultInstance() {
}

MapRemoveChar::MapRemoveChar(const MapRemoveChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapRemoveChar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapRemoveChar::~MapRemoveChar() {
  SharedDtor();
}

void MapRemoveChar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapRemoveChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapRemoveChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapRemoveChar_descriptor_;
}

const MapRemoveChar& MapRemoveChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

MapRemoveChar* MapRemoveChar::default_instance_ = NULL;

MapRemoveChar* MapRemoveChar::New() const {
  return new MapRemoveChar;
}

void MapRemoveChar::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapRemoveChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_users())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_users())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapRemoveChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapRemoveChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapRemoveChar::ByteSize() const {
  int total_size = 0;

  // repeated uint32 users = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->users_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->users(i));
    }
    total_size += 1 * this->users_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapRemoveChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapRemoveChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapRemoveChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapRemoveChar::MergeFrom(const MapRemoveChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapRemoveChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapRemoveChar::CopyFrom(const MapRemoveChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRemoveChar::IsInitialized() const {

  return true;
}

void MapRemoveChar::Swap(MapRemoveChar* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapRemoveChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapRemoveChar_descriptor_;
  metadata.reflection = MapRemoveChar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharChangeScene::kCityidFieldNumber;
const int CharChangeScene::kMapidFieldNumber;
const int CharChangeScene::kXFieldNumber;
const int CharChangeScene::kYFieldNumber;
#endif  // !_MSC_VER

CharChangeScene::CharChangeScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharChangeScene::InitAsDefaultInstance() {
}

CharChangeScene::CharChangeScene(const CharChangeScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharChangeScene::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  mapid_ = 0u;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharChangeScene::~CharChangeScene() {
  SharedDtor();
}

void CharChangeScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharChangeScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharChangeScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharChangeScene_descriptor_;
}

const CharChangeScene& CharChangeScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

CharChangeScene* CharChangeScene::default_instance_ = NULL;

CharChangeScene* CharChangeScene::New() const {
  return new CharChangeScene;
}

void CharChangeScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cityid_ = 0u;
    mapid_ = 0u;
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharChangeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharChangeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cityid = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharChangeScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cityid = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharChangeScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cityid = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharChangeScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharChangeScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharChangeScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharChangeScene::MergeFrom(const CharChangeScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharChangeScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharChangeScene::CopyFrom(const CharChangeScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharChangeScene::IsInitialized() const {

  return true;
}

void CharChangeScene::Swap(CharChangeScene* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(mapid_, other->mapid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharChangeScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharChangeScene_descriptor_;
  metadata.reflection = CharChangeScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseChangeScene::kMapidFieldNumber;
const int ResponseChangeScene::kCityidFieldNumber;
const int ResponseChangeScene::kXFieldNumber;
const int ResponseChangeScene::kYFieldNumber;
const int ResponseChangeScene::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseChangeScene::ResponseChangeScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseChangeScene::InitAsDefaultInstance() {
}

ResponseChangeScene::ResponseChangeScene(const ResponseChangeScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseChangeScene::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  cityid_ = 0u;
  x_ = 0u;
  y_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseChangeScene::~ResponseChangeScene() {
  SharedDtor();
}

void ResponseChangeScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseChangeScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseChangeScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseChangeScene_descriptor_;
}

const ResponseChangeScene& ResponseChangeScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

ResponseChangeScene* ResponseChangeScene::default_instance_ = NULL;

ResponseChangeScene* ResponseChangeScene::New() const {
  return new ResponseChangeScene;
}

void ResponseChangeScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    cityid_ = 0u;
    x_ = 0u;
    y_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseChangeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cityid;
        break;
      }

      // optional uint32 cityid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // optional uint32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // optional uint32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .clientmsg.enumChangeSceneResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clientmsg::enumChangeSceneResult_IsValid(value)) {
            set_result(static_cast< ::clientmsg::enumChangeSceneResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseChangeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint32 cityid = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityid(), output);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // optional .clientmsg.enumChangeSceneResult result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseChangeScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional uint32 cityid = 2;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cityid(), target);
  }

  // optional uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // optional uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // optional .clientmsg.enumChangeSceneResult result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseChangeScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 cityid = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional .clientmsg.enumChangeSceneResult result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseChangeScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseChangeScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseChangeScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseChangeScene::MergeFrom(const ResponseChangeScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseChangeScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseChangeScene::CopyFrom(const ResponseChangeScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseChangeScene::IsInitialized() const {

  return true;
}

void ResponseChangeScene::Swap(ResponseChangeScene* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(cityid_, other->cityid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseChangeScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseChangeScene_descriptor_;
  metadata.reflection = ResponseChangeScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharGoTo::kXFieldNumber;
const int CharGoTo::kYFieldNumber;
#endif  // !_MSC_VER

CharGoTo::CharGoTo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharGoTo::InitAsDefaultInstance() {
}

CharGoTo::CharGoTo(const CharGoTo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharGoTo::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharGoTo::~CharGoTo() {
  SharedDtor();
}

void CharGoTo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharGoTo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharGoTo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharGoTo_descriptor_;
}

const CharGoTo& CharGoTo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();
  return *default_instance_;
}

CharGoTo* CharGoTo::default_instance_ = NULL;

CharGoTo* CharGoTo::New() const {
  return new CharGoTo;
}

void CharGoTo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharGoTo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharGoTo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharGoTo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharGoTo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharGoTo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharGoTo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharGoTo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharGoTo::MergeFrom(const CharGoTo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharGoTo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharGoTo::CopyFrom(const CharGoTo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharGoTo::IsInitialized() const {

  return true;
}

void CharGoTo::Swap(CharGoTo* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharGoTo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharGoTo_descriptor_;
  metadata.reflection = CharGoTo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace clientmsg

// @@protoc_insertion_point(global_scope)
